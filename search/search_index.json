{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome! Welcome to https://androidbyexample.com. This is the content site for Johns Hopkins University Whiting School of Engineering's 605.686 Mobile Development for the Android Platform . All code and content is open source and free for use. Please see the LICENSE-code.md and LICENSE-content.md files for license details. Using this site I recommend viewing this site on a desktop or laptop, full screen (or in a reasonably-wide window). It will likely not be terribly useful on a phone screen or tablet in portrait display. Navigation links will be visible on the left if there is enough screen space. Otherwise, a navigation button will appear in the upper left corner of the site; click on it and you can navigate. This site is currently under development. Each week of the course starts on Wednesday, and content and sample code for that week will be released prior to Wednesday. I updated a good bit of the material in the first half of the course while teaching it live this summer, and am converting it into a new format that I think will make it More easily searchable. Allow self pacing vs video content where I control the pace. Be more accessible than trying to read closed captions while also watching the video content. Ensure all changes at each step of an example are displayed. Easier to find and review previous sections while writing your assignment code. I will continue using much of the content from last fall's refresh for the later half of the course. This content is primarily in video form. I'd like to know your thoughts on how the new textual format works for you. Please think about it while reading the new content and watching the older videos. Everyone learns differently, and I'm hoping the new format will help, especially when you need to review a past section.","title":"Android By Example"},{"location":"index.html#welcome","text":"Welcome to https://androidbyexample.com. This is the content site for Johns Hopkins University Whiting School of Engineering's 605.686 Mobile Development for the Android Platform . All code and content is open source and free for use. Please see the LICENSE-code.md and LICENSE-content.md files for license details.","title":"Welcome!"},{"location":"index.html#using-this-site","text":"I recommend viewing this site on a desktop or laptop, full screen (or in a reasonably-wide window). It will likely not be terribly useful on a phone screen or tablet in portrait display. Navigation links will be visible on the left if there is enough screen space. Otherwise, a navigation button will appear in the upper left corner of the site; click on it and you can navigate. This site is currently under development. Each week of the course starts on Wednesday, and content and sample code for that week will be released prior to Wednesday. I updated a good bit of the material in the first half of the course while teaching it live this summer, and am converting it into a new format that I think will make it More easily searchable. Allow self pacing vs video content where I control the pace. Be more accessible than trying to read closed captions while also watching the video content. Ensure all changes at each step of an example are displayed. Easier to find and review previous sections while writing your assignment code. I will continue using much of the content from last fall's refresh for the later half of the course. This content is primarily in video form. I'd like to know your thoughts on how the new textual format works for you. Please think about it while reading the new content and watching the older videos. Everyone learns differently, and I'm hoping the new format will help, especially when you need to review a past section.","title":"Using this site"},{"location":"contact.html","text":"Scott Stanchfield By day, Scott works at Google in Android Developer Relations. They usually tell him to go play with some (colorful) blocks in the corner (so everyone else can actually get some work done). By night, Scott can be found teaching Android Mobile Application Development and Kotlin programming for the JHU Whiting School. If it hadn\u2019t been for this pandemic, he\u2019d be swing dancing, singing Karaoke and attending musicals whenever they stop in Baltimore or DC. Scott's been a Software Developer/Architect for over 30 years. Some highlights: Worked for Tom McCabe, creator of the Cyclomatic Complexity metric. Worked for Frank DeRemer and Tom Penello, inventors of LALR parsing (the type of parsing used by the lex and yacc parser-generation tools) Worked for Terence Parr (creator of PCCS/ANTLR - which use LL parsing) Was on the ANSI C++ 1998 Standardization committee (don't blame him; he was only in the last two sessions and tried to stop it...) Spent four years as a Java corporate trainer throughout the world Wrote Effective VisualAge for Java, Version 3.5 in the late 90's Held the world record on Discs of Tron (arcade) in the mid 80's. Currently #3 at Twin Galaxies, and #2 on Arcade1Up's machine. A Few Pictures I'm a Noogler! Best. Glasses. Ever! (Part of my MC-3P0 costume) Roller Coasters... LOVE 'EM! Education History Bachelor of Arts Computer Science, The University of Michigan Master of Science Computer Science, The Johns Hopkins University Publications Please see http://www.javadude.com/publications/ Contact Information Website: https://javadude.com JHU Email: scott.stanchfield@jhu.edu (use for all class communication) Personal Email: scott@javadude.com (only use for non-class communication)","title":"About Your Instructor"},{"location":"contact.html#scott-stanchfield","text":"By day, Scott works at Google in Android Developer Relations. They usually tell him to go play with some (colorful) blocks in the corner (so everyone else can actually get some work done). By night, Scott can be found teaching Android Mobile Application Development and Kotlin programming for the JHU Whiting School. If it hadn\u2019t been for this pandemic, he\u2019d be swing dancing, singing Karaoke and attending musicals whenever they stop in Baltimore or DC. Scott's been a Software Developer/Architect for over 30 years. Some highlights: Worked for Tom McCabe, creator of the Cyclomatic Complexity metric. Worked for Frank DeRemer and Tom Penello, inventors of LALR parsing (the type of parsing used by the lex and yacc parser-generation tools) Worked for Terence Parr (creator of PCCS/ANTLR - which use LL parsing) Was on the ANSI C++ 1998 Standardization committee (don't blame him; he was only in the last two sessions and tried to stop it...) Spent four years as a Java corporate trainer throughout the world Wrote Effective VisualAge for Java, Version 3.5 in the late 90's Held the world record on Discs of Tron (arcade) in the mid 80's. Currently #3 at Twin Galaxies, and #2 on Arcade1Up's machine.","title":"Scott Stanchfield"},{"location":"contact.html#a-few-pictures","text":"I'm a Noogler! Best. Glasses. Ever! (Part of my MC-3P0 costume) Roller Coasters... LOVE 'EM!","title":"A Few Pictures"},{"location":"contact.html#education-history","text":"Bachelor of Arts Computer Science, The University of Michigan Master of Science Computer Science, The Johns Hopkins University","title":"Education History"},{"location":"contact.html#publications","text":"Please see http://www.javadude.com/publications/","title":"Publications"},{"location":"contact.html#contact-information","text":"Website: https://javadude.com JHU Email: scott.stanchfield@jhu.edu (use for all class communication) Personal Email: scott@javadude.com (only use for non-class communication)","title":"Contact Information"},{"location":"week-01/1.1-Introduction/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/introduction","title":"Introduction"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html","text":"Note All of the content in this Introduction module is critical to your success in this class. I know it's not the most thrilling read, but please be sure to read it thoroughly. Course Content All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus. Your Actions Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction. Welcome! Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading. Content Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you. Sample Code Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available. If you haven\u2019t used git before... Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run ``` git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. ``` (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run ``` git pull ``` Kotlin Note All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool Online Video Tips Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit. Office Hours Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late) Questions If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Welcome!"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#course-content","text":"All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus.","title":"Course Content"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#your-actions","text":"Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction.","title":"Your Actions"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#welcome","text":"Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading.","title":"Welcome!"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#content","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you.","title":"Content"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#sample-code","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available.","title":"Sample Code"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#if-you-havent-used-git-before","text":"Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run ``` git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. ``` (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run ``` git pull ```","title":"If you haven\u2019t used git before..."},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#kotlin-note","text":"All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool","title":"Kotlin Note"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#online-video-tips","text":"Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit.","title":"Online Video Tips"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#office-hours","text":"Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late)","title":"Office Hours"},{"location":"week-01/1.1-Introduction/STEP_00_FULL.html#questions","text":"If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Questions"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html","text":"Note All of the content in this Introduction module is critical to your success in this class. I know it's not the most thrilling read, but please be sure to read it thoroughly. Course Content All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus. Your Actions Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction. Welcome! Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading. Content Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you. Sample Code Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available. If you haven\u2019t used git before... Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run ``` git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. ``` (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run ``` git pull ``` Kotlin Note All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool Online Video Tips Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit. Office Hours Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late) Questions If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Welcome!"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#course-content","text":"All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus.","title":"Course Content"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#your-actions","text":"Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction.","title":"Your Actions"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#welcome","text":"Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading.","title":"Welcome!"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#content","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you.","title":"Content"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#sample-code","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available.","title":"Sample Code"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#if-you-havent-used-git-before","text":"Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run ``` git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. ``` (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run ``` git pull ```","title":"If you haven\u2019t used git before..."},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#kotlin-note","text":"All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool","title":"Kotlin Note"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#online-video-tips","text":"Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit.","title":"Online Video Tips"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#office-hours","text":"Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late)","title":"Office Hours"},{"location":"week-01/1.1-Introduction/STEP_05_FULL.html#questions","text":"If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Questions"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html","tags":["setup"],"text":"Hardware You do not need an Android device for your coursework, but if you have access to one (or want to purchase one for your coursework) development feels more realistic. Note that if you have low memory and/or do not have an SSD on your computer, an external device may help performance. For running Android Studio, the minimum recommended configuration is 8GB RAM with an SSD. More memory is better, as Android Studio and the Android emulator love to use lots of memory. Ideally you'll have 16GB or more RAM. If you have only 8GB RAM, I strongly recommend you either upgrade your RAM or purchase an inexpensive Android phone for classwork. Many pay-as-you-go phones (which you do not have to activate) can be found for under $100 and will greatly improve your development experience. Software The following are the required versions of tools for this term. Please keep a copy of all downloaded installation files in case you need to reinstall during the term! Warning Do not upgrade any versions after the first module unless I instruct you to do so! We want to make sure we're using the same version of everything that you are when we grade your assignment submissions. Name Version Android Studio https://developer.android.com/studio/preview Dolphin (2021.3.1 RC 1) Kotlin (plugin version in build.gradle) 1.7.10 Jetpack Compose UI (compose_ui_version in build.gradle) 1.2.1 Jetpack Compose Compiler (compose_compiler_version in build.gradle) 1.3.0 Android minimum API (minSdk in app/build.gradle) 21 Android target API (targetSdk in app/build.gradle) 32 Android compile API (compileSdk in app/build.gradle) 32 Sample Code See the \"Sample Code\" module for download and usage instructions If you see any problems in the sample code, please let me know and I'll update it.","title":"Course Hardware and Software"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#hardware","text":"You do not need an Android device for your coursework, but if you have access to one (or want to purchase one for your coursework) development feels more realistic. Note that if you have low memory and/or do not have an SSD on your computer, an external device may help performance. For running Android Studio, the minimum recommended configuration is 8GB RAM with an SSD. More memory is better, as Android Studio and the Android emulator love to use lots of memory. Ideally you'll have 16GB or more RAM. If you have only 8GB RAM, I strongly recommend you either upgrade your RAM or purchase an inexpensive Android phone for classwork. Many pay-as-you-go phones (which you do not have to activate) can be found for under $100 and will greatly improve your development experience.","title":"Hardware"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#software","text":"The following are the required versions of tools for this term. Please keep a copy of all downloaded installation files in case you need to reinstall during the term! Warning Do not upgrade any versions after the first module unless I instruct you to do so! We want to make sure we're using the same version of everything that you are when we grade your assignment submissions. Name Version Android Studio https://developer.android.com/studio/preview Dolphin (2021.3.1 RC 1) Kotlin (plugin version in build.gradle) 1.7.10 Jetpack Compose UI (compose_ui_version in build.gradle) 1.2.1 Jetpack Compose Compiler (compose_compiler_version in build.gradle) 1.3.0 Android minimum API (minSdk in app/build.gradle) 21 Android target API (targetSdk in app/build.gradle) 32 Android compile API (compileSdk in app/build.gradle) 32","title":"Software"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#sample-code","text":"See the \"Sample Code\" module for download and usage instructions If you see any problems in the sample code, please let me know and I'll update it.","title":"Sample Code"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html","tags":["setup"],"text":"Late Submissions Late submissions will be reduced by one letter grade (1 point) for each DAY (or partial day) late (no exceptions without timely prior coordination with the instructors). See the grading policy for assignment grading details. Note If you expect any issues with turning in work on time, please see the instructor as soon as you know. If I know in advance about travel, expected high workloads or other issues, I can work with you. However, letting me know a day or two before an assignment is due is not acceptable (If an emergency occurs, please let me know as soon as possible afterwards.) Note If you encounter issues while trying to submit your assignment, please immediately send me an email with your submission text and a note stating that Canvas is being your best friend. If you submit in this manner, I will not count your submission as late. Note that the easiest way to get a lower grade is to turn in your assignments late. If you know that something is coming up (business/vacation travel, expected very busy week at work, medical, expected baby) please let me know and I'm happy to work with you. Commit Often!!! Note: I highly recommend that you store your code in a version control system such as subversion or git. However, if you host your project on a public site like github, you must make the repositories private! (Note that bitbucket provides free private repositories) Any non-private repositories that I find online will automatically set your grade to \"F\" for sharing code. Be sure to control your source code! Lost code will not be accepted as an excuse for late or missing assignments. General guidelines for grade ranges These are general guidelines, not absolute descriptions of a grading level. Your overall grade on an assignment depends on the overall quality and functionality of your submission. Again, these are general guidelines. You can get lower grades for very significant problems in your submissions and very late submissions. Letter Grade Common Reasons for the Grade A On time AND Working AND Good design B Missing required functionality Not quite working Bad design/bad style One day late (but would have otherwise been an \"A\") C Many missing functions Will not compile Will not execute properly Very bad design One day late (but would have been an \"B\") Two days late (but would have been an \"A\") F Little apparent effort Plagiarism Three or more days late Not turned in I grade on the following aspects of your submissions. Note that there is no specific percentage allocation for each of these concepts. Aspect What I Look For Design Does the design use the patterns discussed in class properly? Does the design fit the problem? Is the program designed with a maintenance programmer in mind? Can I determine why you did things the way you did by reading code and comments? Function Is all required function present? Is any non-required function present? (grade deduction) Does present function work properly? Style and Coding Conventions Is the code readable? Can I easily figure out what it's doing just by reading the code? Does the code follow the required coding conventions? Note: Not following the required coding conventions, even once in a submission, maximizes your assignment grade at A- Timeliness Was the assignment submitted on time? one day late = 1-point grade deduction two days late = 2-point grade deduction ... Coding Conventions All assignments must observe the following coding conventions. Why? I read your code Sometimes your code doesn't work correctly (sometimes spectacularly so...). Before I decide on the grade to give you, I carefully read the code to try to figure out why it didn't work. If the reason is a small, subtle thing, I'll often give more credit (rather than simply saying \"doesn't work; you get a C\") I often have to do this for several assignments. If the code is readable, using meaning variable, method and class names, I can often find the problems more quickly. Keep in mind that I have many submissions to review each time, and usually 20% or more have some big issues. This also helps a good bit when some of you are having trouble before submitting and ask for help. If I can read the code, I can figure out what's going on and respond that much more quickly. Indentation must be consistent. Use either spaces or tabs, but not both! All type names must follow Upper-Camel Case ShoppingCart ObjectDrawingApplet All variable and method names must follow Lower-Camel Case drawObject() numberOfObjectsOnScreen Type, variable and method names shall be a series of full words, not abbreviations or single letters. Standard acronyms are acceptable (such as url), but names like \"c\" are generally not acceptable. If you aren't sure whether a name is acceptable, feel free to ask me, but remember the rule of thumb: it should sound exactly like what it's being used for. Some Exceptions (based on common, understood usage) integer counters in loops can be named i, j, k the \"current number\" for walking through an array or counting items can be n e for an exception in a catch block All classes and interfaces must be contained in a Kotlin package All Kotlin package names must be completely lower-case and start with lastname.firstname.hw# where the # is the homework number. For example, I might have a project named \"stanchfield.scott.hw4\"(with the same Android package name) that contains Kotlin packages: stanchfield.scott.hw4 stanchfield.scott.hw4.model stanchfield.scott.hw4.database All projects must be named HW1, HW2, HW3 and so forth All submission zip files must be named lastname . firstname .HW1.zip, lastname . firstname .HW2.zip, etc All string literals that would appear for the user (typically text in TextViews, dialogs, toasts, etc) must be externalized into the strings.xml file. This is a really good habit to get into upfront, and you should always do this in any application you create to make localization simpler. Note This means all user-facing text. Any string constants that the user could see, whether used in your XML files or Kotlin code, must be externalized.","title":"Assignments"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#late-submissions","text":"Late submissions will be reduced by one letter grade (1 point) for each DAY (or partial day) late (no exceptions without timely prior coordination with the instructors). See the grading policy for assignment grading details. Note If you expect any issues with turning in work on time, please see the instructor as soon as you know. If I know in advance about travel, expected high workloads or other issues, I can work with you. However, letting me know a day or two before an assignment is due is not acceptable (If an emergency occurs, please let me know as soon as possible afterwards.) Note If you encounter issues while trying to submit your assignment, please immediately send me an email with your submission text and a note stating that Canvas is being your best friend. If you submit in this manner, I will not count your submission as late. Note that the easiest way to get a lower grade is to turn in your assignments late. If you know that something is coming up (business/vacation travel, expected very busy week at work, medical, expected baby) please let me know and I'm happy to work with you.","title":"Late Submissions"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#commit-often","text":"Note: I highly recommend that you store your code in a version control system such as subversion or git. However, if you host your project on a public site like github, you must make the repositories private! (Note that bitbucket provides free private repositories) Any non-private repositories that I find online will automatically set your grade to \"F\" for sharing code. Be sure to control your source code! Lost code will not be accepted as an excuse for late or missing assignments.","title":"Commit Often!!!"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#general-guidelines-for-grade-ranges","text":"These are general guidelines, not absolute descriptions of a grading level. Your overall grade on an assignment depends on the overall quality and functionality of your submission. Again, these are general guidelines. You can get lower grades for very significant problems in your submissions and very late submissions. Letter Grade Common Reasons for the Grade A On time AND Working AND Good design B Missing required functionality Not quite working Bad design/bad style One day late (but would have otherwise been an \"A\") C Many missing functions Will not compile Will not execute properly Very bad design One day late (but would have been an \"B\") Two days late (but would have been an \"A\") F Little apparent effort Plagiarism Three or more days late Not turned in I grade on the following aspects of your submissions. Note that there is no specific percentage allocation for each of these concepts. Aspect What I Look For Design Does the design use the patterns discussed in class properly? Does the design fit the problem? Is the program designed with a maintenance programmer in mind? Can I determine why you did things the way you did by reading code and comments? Function Is all required function present? Is any non-required function present? (grade deduction) Does present function work properly? Style and Coding Conventions Is the code readable? Can I easily figure out what it's doing just by reading the code? Does the code follow the required coding conventions? Note: Not following the required coding conventions, even once in a submission, maximizes your assignment grade at A- Timeliness Was the assignment submitted on time? one day late = 1-point grade deduction two days late = 2-point grade deduction ...","title":"General guidelines for grade ranges"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#coding-conventions","text":"All assignments must observe the following coding conventions. Why? I read your code Sometimes your code doesn't work correctly (sometimes spectacularly so...). Before I decide on the grade to give you, I carefully read the code to try to figure out why it didn't work. If the reason is a small, subtle thing, I'll often give more credit (rather than simply saying \"doesn't work; you get a C\") I often have to do this for several assignments. If the code is readable, using meaning variable, method and class names, I can often find the problems more quickly. Keep in mind that I have many submissions to review each time, and usually 20% or more have some big issues. This also helps a good bit when some of you are having trouble before submitting and ask for help. If I can read the code, I can figure out what's going on and respond that much more quickly. Indentation must be consistent. Use either spaces or tabs, but not both! All type names must follow Upper-Camel Case ShoppingCart ObjectDrawingApplet All variable and method names must follow Lower-Camel Case drawObject() numberOfObjectsOnScreen Type, variable and method names shall be a series of full words, not abbreviations or single letters. Standard acronyms are acceptable (such as url), but names like \"c\" are generally not acceptable. If you aren't sure whether a name is acceptable, feel free to ask me, but remember the rule of thumb: it should sound exactly like what it's being used for. Some Exceptions (based on common, understood usage) integer counters in loops can be named i, j, k the \"current number\" for walking through an array or counting items can be n e for an exception in a catch block All classes and interfaces must be contained in a Kotlin package All Kotlin package names must be completely lower-case and start with lastname.firstname.hw# where the # is the homework number. For example, I might have a project named \"stanchfield.scott.hw4\"(with the same Android package name) that contains Kotlin packages: stanchfield.scott.hw4 stanchfield.scott.hw4.model stanchfield.scott.hw4.database All projects must be named HW1, HW2, HW3 and so forth All submission zip files must be named lastname . firstname .HW1.zip, lastname . firstname .HW2.zip, etc All string literals that would appear for the user (typically text in TextViews, dialogs, toasts, etc) must be externalized into the strings.xml file. This is a really good habit to get into upfront, and you should always do this in any application you create to make localization simpler. Note This means all user-facing text. Any string constants that the user could see, whether used in your XML files or Kotlin code, must be externalized.","title":"Coding Conventions"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html","tags":["setup"],"text":"Points Assignments are worth 4 points each, mapping to GPA letters. My grader and I assign letter grades first, then convert them to numbers and apply late penalties. The grading scale from letters to numbers is as follows: Letter Grade Numerical Equivalent A 4.0 A- 3.7 (A/B border) 3.5 B+ 3.3 B 3.0 B- 2.7 (B/C border) 2.5 C+ 2.3 C 2.0 C- 1.7 (C/D border) 1.5 D+ 1.3 D 1.0 D- 0.7 F 0 Note that there is no A+. We had been reserving that for \"exemplary\" submissions, but some students considered an \"A\" as lost points. Your final grade WILL NOT include +/- designations. A/A- both count as \"A\" and \"4\" for University GPA purposes(and similar for other letter grades). Late Penalty Each day late results in 1 full letter grade (1 point) off. This is to prevent cascading lateness. In the past students would submit an assignment a week late and have one week less to do the next assignment, which would often result in that assignment being late as well. The also made it difficult to discus assignments until all were submitted. When grading assignments, we will write comments describing your grade, but we will usually not note specific point-value deductions (see \"Holistic Grading\" below). Some comments are \"for your information\"/\"helpful hints\" and will be marked to indicate that they have no effect on the grade. If you disagree with a grade you can ask us to review it. Tell us what your concerns are and we'll look at it. Sometimes we may miss something in your code. If we note a problem with a submission that was also noted for a previous submission, we will not count off for it. (If we do, please let use know and we'll correct the grade.) \"Holistic\" Grading I started out using a rubric to grade. For many reasons, this almost never reflected reality, so after a few terms, I realized a much fairer scheme, that I call \"holistic grading\" First, some problems with Rubrics... Gaming the System When I had point counts next to features, many students would decide which features to implement based on how many points they felt they could afford to lose. Rather than implement all function (the point of which is to exercise important techniques), they would implement a subset just to \"get the grade\". This is frustrating for a teacher because we design exercises to be sure students have had the opportunity to try out important techniques. \"Sum of the Parts\" vs \"The Whole\" Rubrics tend to cut both ways when the points are added up... Sometimes, a few relatively minor things that don't greatly impact the overall submission would numerically push the grade into \"B\" territory or lower. This didn't feel fair to the student based on the overall result, but to be fair to all students I had to stick with the grade based off the rubric. Other times, small things that made an impact when combined could result in an \"A\" that didn't feel right (sometimes because of gaming the system, other times because the small problems really added up). \"That shouldn't be n points off\" The most common complaint would be that either the rubric was unfair in the number of points it assigned to a specific item, or that I was applying a rubric item too broadly to a problem in the submission. Most of the time I would leave the grade as-is, but in some cases it was a matter of a possible alternative interpretation of the assignment requirements, in which case I adjusted the points off. Later, after I stopped using rubrics, but would list points deductions on assignment comments, I'd get the same complaints. In either case, this never made any significant difference in the grade for the assignment, or the course. Students ended up spending a good bit of time trying to figure out which items they could argue to get a few points back, not realizing a few points over the term made no effective difference. This led me to... \"Holistic Grading\" (If it sounds a little \"New Age\", it's not... \"Holistic\" here simply means \"looking at the whole\") \"This feels like a B+\"... My grader and I write comments about what we see in the assignment, and don't write specific deductions for each one. We look at the overall result, taking all comments into account, and say \"that's an A\", or \"that's a B-\", or \"that's barely anything more than the sample code\" (at which point we estimate the % of the assignment that was done and assign that number). The letters we assign are converted to numbers. A=4.0, A-=3.7, etc. When coming up with these letters, one of my key concepts is \"things that cap the grade at A-\". There's not a fixed list of such items, but things like \"coding conventions\" fall into this category. If several small things like these happen, a rubric may have pushed the grade into \"B\" territory. When I see several little things but otherwise the overall submission feels like an \"A\", I use \"A-\" as the grade. Note that if there are \"cap\" items as well as bigger issues, the \"cap\" items won't push the grade lower than the bigger issues already would have. Usually, if features are missing or not implemented per the assignment description, I start thinking \"B\", but if they're very minor features or present but not quite what was explicitly stated in the assignment description, and otherwise the assignment looked good, I'll go with \"A-\". Because of this, \"A-\" is often the most common grade for an assignment. If the assignment does everything we ask, in the ways I taught in class, meets coding standards, and is on time, that's where \"A\" comes in. Other grades (before late deductions) are usually driven by Feature omissions or problems Most common: something is missing or doesn't work properly This is often because a student started work a few days before the assignment was due and didn't have time to ask questions or study the concepts. Crashes and compilation errors Note that we try to make your code work before grading it. Sometimes it's an inverted boolean expression, and if we can get it working and it's something simple, we'll give a better grade than \"doesn't work\". However, sometimes, after spending an hour or two trying to get it to work, we have to give up... Working together or Plagiarism I've caught many students doing this... Sometimes they even try to submit something they found online that doesn't match the assignment description or is very obviously not based on what I've taught. Bottom line: When you see a \"3.7\" for a submission, don't think of it as \"0.3 points off\". Think of it as a few minor things aren't right. If that's how most of your assignments go, that's an \"A\" for the course... Distribution of Grades It is possible (and has happened in past sections) for everyone to get an \"A\" in this course. I will not be applying any sort of curve or other means to artificially distribute grades. I will be looking closely at your efforts in this class when determining your final grades. An \"A\" grade in this course requires a good deal of effort. Do not expect an \"A\" if you start programming a few nights before they are due... Let me repeat that. Do not expect an \"A\" if you start programming assignments a few nights before they are due... This has often been the reason for B and C grades in the course; students do not allow enough time to ask clarifying questions or do the coding. Be sure to at least look over and understand the assignments at the beginning of the week they are assigned! This will give you time to ask questions. If you do all the work well and on-time, you will get an \"A\" for the course. If you do all of the work on-time but are having trouble with the concepts, you'll likely get a \"B\" for the course. If you're in danger of a lower grade, I will speak with you as soon as it becomes apparent to me.","title":"Grading"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#points","text":"Assignments are worth 4 points each, mapping to GPA letters. My grader and I assign letter grades first, then convert them to numbers and apply late penalties. The grading scale from letters to numbers is as follows: Letter Grade Numerical Equivalent A 4.0 A- 3.7 (A/B border) 3.5 B+ 3.3 B 3.0 B- 2.7 (B/C border) 2.5 C+ 2.3 C 2.0 C- 1.7 (C/D border) 1.5 D+ 1.3 D 1.0 D- 0.7 F 0 Note that there is no A+. We had been reserving that for \"exemplary\" submissions, but some students considered an \"A\" as lost points. Your final grade WILL NOT include +/- designations. A/A- both count as \"A\" and \"4\" for University GPA purposes(and similar for other letter grades).","title":"Points"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#late-penalty","text":"Each day late results in 1 full letter grade (1 point) off. This is to prevent cascading lateness. In the past students would submit an assignment a week late and have one week less to do the next assignment, which would often result in that assignment being late as well. The also made it difficult to discus assignments until all were submitted. When grading assignments, we will write comments describing your grade, but we will usually not note specific point-value deductions (see \"Holistic Grading\" below). Some comments are \"for your information\"/\"helpful hints\" and will be marked to indicate that they have no effect on the grade. If you disagree with a grade you can ask us to review it. Tell us what your concerns are and we'll look at it. Sometimes we may miss something in your code. If we note a problem with a submission that was also noted for a previous submission, we will not count off for it. (If we do, please let use know and we'll correct the grade.)","title":"Late Penalty"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#holistic-grading","text":"I started out using a rubric to grade. For many reasons, this almost never reflected reality, so after a few terms, I realized a much fairer scheme, that I call \"holistic grading\" First, some problems with Rubrics... Gaming the System When I had point counts next to features, many students would decide which features to implement based on how many points they felt they could afford to lose. Rather than implement all function (the point of which is to exercise important techniques), they would implement a subset just to \"get the grade\". This is frustrating for a teacher because we design exercises to be sure students have had the opportunity to try out important techniques. \"Sum of the Parts\" vs \"The Whole\" Rubrics tend to cut both ways when the points are added up... Sometimes, a few relatively minor things that don't greatly impact the overall submission would numerically push the grade into \"B\" territory or lower. This didn't feel fair to the student based on the overall result, but to be fair to all students I had to stick with the grade based off the rubric. Other times, small things that made an impact when combined could result in an \"A\" that didn't feel right (sometimes because of gaming the system, other times because the small problems really added up). \"That shouldn't be n points off\" The most common complaint would be that either the rubric was unfair in the number of points it assigned to a specific item, or that I was applying a rubric item too broadly to a problem in the submission. Most of the time I would leave the grade as-is, but in some cases it was a matter of a possible alternative interpretation of the assignment requirements, in which case I adjusted the points off. Later, after I stopped using rubrics, but would list points deductions on assignment comments, I'd get the same complaints. In either case, this never made any significant difference in the grade for the assignment, or the course. Students ended up spending a good bit of time trying to figure out which items they could argue to get a few points back, not realizing a few points over the term made no effective difference. This led me to... \"Holistic Grading\" (If it sounds a little \"New Age\", it's not... \"Holistic\" here simply means \"looking at the whole\") \"This feels like a B+\"... My grader and I write comments about what we see in the assignment, and don't write specific deductions for each one. We look at the overall result, taking all comments into account, and say \"that's an A\", or \"that's a B-\", or \"that's barely anything more than the sample code\" (at which point we estimate the % of the assignment that was done and assign that number). The letters we assign are converted to numbers. A=4.0, A-=3.7, etc. When coming up with these letters, one of my key concepts is \"things that cap the grade at A-\". There's not a fixed list of such items, but things like \"coding conventions\" fall into this category. If several small things like these happen, a rubric may have pushed the grade into \"B\" territory. When I see several little things but otherwise the overall submission feels like an \"A\", I use \"A-\" as the grade. Note that if there are \"cap\" items as well as bigger issues, the \"cap\" items won't push the grade lower than the bigger issues already would have. Usually, if features are missing or not implemented per the assignment description, I start thinking \"B\", but if they're very minor features or present but not quite what was explicitly stated in the assignment description, and otherwise the assignment looked good, I'll go with \"A-\". Because of this, \"A-\" is often the most common grade for an assignment. If the assignment does everything we ask, in the ways I taught in class, meets coding standards, and is on time, that's where \"A\" comes in. Other grades (before late deductions) are usually driven by Feature omissions or problems Most common: something is missing or doesn't work properly This is often because a student started work a few days before the assignment was due and didn't have time to ask questions or study the concepts. Crashes and compilation errors Note that we try to make your code work before grading it. Sometimes it's an inverted boolean expression, and if we can get it working and it's something simple, we'll give a better grade than \"doesn't work\". However, sometimes, after spending an hour or two trying to get it to work, we have to give up... Working together or Plagiarism I've caught many students doing this... Sometimes they even try to submit something they found online that doesn't match the assignment description or is very obviously not based on what I've taught. Bottom line: When you see a \"3.7\" for a submission, don't think of it as \"0.3 points off\". Think of it as a few minor things aren't right. If that's how most of your assignments go, that's an \"A\" for the course...","title":"\"Holistic\" Grading"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#distribution-of-grades","text":"It is possible (and has happened in past sections) for everyone to get an \"A\" in this course. I will not be applying any sort of curve or other means to artificially distribute grades. I will be looking closely at your efforts in this class when determining your final grades. An \"A\" grade in this course requires a good deal of effort. Do not expect an \"A\" if you start programming a few nights before they are due... Let me repeat that. Do not expect an \"A\" if you start programming assignments a few nights before they are due... This has often been the reason for B and C grades in the course; students do not allow enough time to ask clarifying questions or do the coding. Be sure to at least look over and understand the assignments at the beginning of the week they are assigned! This will give you time to ask questions. If you do all the work well and on-time, you will get an \"A\" for the course. If you do all of the work on-time but are having trouble with the concepts, you'll likely get a \"B\" for the course. If you're in danger of a lower grade, I will speak with you as soon as it becomes apparent to me.","title":"Distribution of Grades"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html","tags":["setup"],"text":"Using Third-Party Code When writing your assignments, you may copy small sections of code and other content you find online if and only if you attribute it and the code is freely copyable with a license that says it's ok to copy. Place a comment above the copied section stating where you found it and the license that applies. Using code from stackoverflow If you're using code from https://stackoverflow.com, note that all code and content is licensed CREATIVE COMMONS \u2013 ATTRIBUTION \u2013 SHARE-ALIKE (CC-BY-SA 3.0) (see https://creativecommons.org/licenses/by-sa/3.0/us/). Warning THIS IS A VIRAL LICENSE!!! This means that any code/content you copy forces you to make your project be licensed CC-BY-SA 3.0!!! This is nearly always a no-no with companies you work for and the government! Note Some code or content may contain additional licenses. For example, when Googlers write code snippets on stackoverflow, they'll add something like // Copyright 2022 Google LLC. // SPDX-License-Identifier: Apache-2.0 at the top of their code to indicate that it's also licensed under the Apache 2.0 license. In this case, it's ok to use the code as long as you adhere to the Apache 2.0 license. For your assignment submissions in this course, copying any content from stackoverflow is fine. In real life, unless the content has a more permissive license, such as Apache 2.0, do not copy code from stackoverflow ! To use stackoverflow safely: Use \u201cclean room\u201d approach Read and understand Close the browser Then write your code Using Course Sample Code You may copy code from my class examples as well. Once again, you must attribute it. Add a comment at the top of your assignment submission source files that states that you're using sample code from the course. Code from the course sample code repository is licensed Apache 2 (see the LICENSE-code.md file in the repository) and can be used/incorporated into your own projects with attribution. Note that this code is generally not well-tested and may contain bugs. If you find something that doesn't work, please let me know and I'll update the samples. Code that I write live in face-to-face class or post in a discussion forum is not licensed for any use outside this class. You may not post or distribute any this code for any purpose other than writing your assignments.","title":"Using Third-Party and Course Sample Code"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-third-party-code","text":"When writing your assignments, you may copy small sections of code and other content you find online if and only if you attribute it and the code is freely copyable with a license that says it's ok to copy. Place a comment above the copied section stating where you found it and the license that applies.","title":"Using Third-Party Code"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-code-from-stackoverflow","text":"If you're using code from https://stackoverflow.com, note that all code and content is licensed CREATIVE COMMONS \u2013 ATTRIBUTION \u2013 SHARE-ALIKE (CC-BY-SA 3.0) (see https://creativecommons.org/licenses/by-sa/3.0/us/). Warning THIS IS A VIRAL LICENSE!!! This means that any code/content you copy forces you to make your project be licensed CC-BY-SA 3.0!!! This is nearly always a no-no with companies you work for and the government! Note Some code or content may contain additional licenses. For example, when Googlers write code snippets on stackoverflow, they'll add something like // Copyright 2022 Google LLC. // SPDX-License-Identifier: Apache-2.0 at the top of their code to indicate that it's also licensed under the Apache 2.0 license. In this case, it's ok to use the code as long as you adhere to the Apache 2.0 license. For your assignment submissions in this course, copying any content from stackoverflow is fine. In real life, unless the content has a more permissive license, such as Apache 2.0, do not copy code from stackoverflow ! To use stackoverflow safely: Use \u201cclean room\u201d approach Read and understand Close the browser Then write your code","title":"Using code from stackoverflow"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-course-sample-code","text":"You may copy code from my class examples as well. Once again, you must attribute it. Add a comment at the top of your assignment submission source files that states that you're using sample code from the course. Code from the course sample code repository is licensed Apache 2 (see the LICENSE-code.md file in the repository) and can be used/incorporated into your own projects with attribution. Note that this code is generally not well-tested and may contain bugs. If you find something that doesn't work, please let me know and I'll update the samples. Code that I write live in face-to-face class or post in a discussion forum is not licensed for any use outside this class. You may not post or distribute any this code for any purpose other than writing your assignments.","title":"Using Course Sample Code"},{"location":"week-01/1.2-Android-studio/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/android-studio","title":"Android Studio"},{"location":"week-01/1.3-Application-structure/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/application-structure","title":"Application Structure"},{"location":"week-02/2.1-Kotlin-primer/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/kotlin-primer","title":"Kotlin Primer"},{"location":"week-02/2.2-Versions/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/versions","title":"Versions"},{"location":"week-02/2.3-Architecture/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/architecture","title":"Architecture"},{"location":"week-03/3.1-Application-components/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/application-components","title":"Application Components"},{"location":"week-03/3.2-Movie-example-introduction/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/movie-example-introduction","title":"Movie Example Introduction"},{"location":"week-03/3.3-Room/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/room","title":"Room"},{"location":"week-03/3.3-Room/STEP_05_FULL.html","text":"Overview Entities and Relationships","title":"Android Databases with Room"},{"location":"week-03/3.3-Room/STEP_05_FULL.html#overview","text":"","title":"Overview"},{"location":"week-03/3.3-Room/STEP_05_FULL.html#entities-and-relationships","text":"","title":"Entities and Relationships"},{"location":"week-03/3.3-Room/STEP_10_REPO.html","text":"Description of initial project","title":"Our initial project"},{"location":"week-03/3.3-Room/STEP_20_REPO.html","text":"Description of adding room dependencies","title":"Adding Room dependencies"},{"location":"week-03/3.3-Room/STEP_30_REPO.html","text":"Description of adding the person entity, dao, database and view model","title":"Adding a Person Entity"},{"location":"week-04/4.1-Compose-basics/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-basics","title":"Compose Basics"},{"location":"week-04/4.2-Compose-state/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-state","title":"Compose State"},{"location":"week-05/5.1-Compose-lists/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-lists","title":"Compose Lists"},{"location":"week-05/5.2-Compose-layouts/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-layouts","title":"Compose Layouts"},{"location":"week-05/5.3-Compose-toast-snackbar-dialog/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-toast-snackbar-dialog","title":"Compose Toast Snackbar Dialog"},{"location":"week-05/5.4-Navigation/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/navigation","title":"Navigation"},{"location":"week-06/6.1-Compose-graphics-1/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-graphics-1","title":"Compose Graphics 1"},{"location":"week-07/7.1-Compose-graphics-2/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-graphics-2","title":"Compose Graphics 2"},{"location":"week-08/8.1-Rest/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/rest","title":"Rest"},{"location":"week-09/9.1-Google-map/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/google-map","title":"Google Map"},{"location":"week-09/9.2-Speech/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/speech","title":"Speech"},{"location":"week-10/10.1-Reading-writing-files/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/reading-writing-files","title":"Reading Writing Files"},{"location":"week-10/10.2-Dependency-injection/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/dependency-injection","title":"Dependency Injection"},{"location":"week-10/10.3-Clean-architecture/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/clean-architecture","title":"Clean Architecture"},{"location":"week-11/11.1-Services/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/services","title":"Services"},{"location":"week-11/11.2-Widgets/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/widgets","title":"Widgets"},{"location":"week-12/12.1-Legacy-views/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/legacy-views","title":"Legacy Views"},{"location":"week-12/12.2-Legacy-fragments/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/legacy-fragments","title":"Legacy Fragments"},{"location":"week-13/13.1-Testing/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/testing","title":"Testing"},{"location":"week-13/13.2-Nfc/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/nfc","title":"Nfc"},{"location":"week-14/14.1-Sensors/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/sensors","title":"Sensors"},{"location":"week-14/14.2-Version-catalogs/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/version-catalogs","title":"Version Catalogs"},{"location":"week-14/14.3-Publishing/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/publishing","title":"Publishing"},{"location":"week-14/14.4-Resources/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/resources","title":"Resources"}]}