{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome! Welcome to https://androidbyexample.com. This is the content site for Johns Hopkins University Whiting School of Engineering's 605.686 Mobile Development for the Android Platform . All code and content is open source and free for use. Please see the LICENSE-code.md and LICENSE-content.md files for license details. Using this site I recommend viewing this site on a desktop or laptop, full screen (or in a reasonably-wide window). It will likely not be terribly useful on a phone screen or tablet in portrait display. Navigation links will be visible on the left if there is enough screen space. Otherwise, a navigation button will appear in the upper left corner of the site; click on it and you can navigate. This site is currently under development. Each week of the course starts on Wednesday, and content and sample code for that week will be released prior to Wednesday. I updated a good bit of the material in the first half of the course while teaching it live this summer, and am converting it into a new format that I think will make it More easily searchable. Allow self pacing vs video content where I control the pace. Be more accessible than trying to read closed captions while also watching the video content. Ensure all changes at each step of an example are displayed. Easier to find and review previous sections while writing your assignment code. I will continue using much of the content from last fall's refresh for the later half of the course. This content is primarily in video form. I'd like to know your thoughts on how the new textual format works for you. Please think about it while reading the new content and watching the older videos. Everyone learns differently, and I'm hoping the new format will help, especially when you need to review a past section.","title":"About This Site"},{"location":"index.html#welcome","text":"Welcome to https://androidbyexample.com. This is the content site for Johns Hopkins University Whiting School of Engineering's 605.686 Mobile Development for the Android Platform . All code and content is open source and free for use. Please see the LICENSE-code.md and LICENSE-content.md files for license details.","title":"Welcome!"},{"location":"index.html#using-this-site","text":"I recommend viewing this site on a desktop or laptop, full screen (or in a reasonably-wide window). It will likely not be terribly useful on a phone screen or tablet in portrait display. Navigation links will be visible on the left if there is enough screen space. Otherwise, a navigation button will appear in the upper left corner of the site; click on it and you can navigate. This site is currently under development. Each week of the course starts on Wednesday, and content and sample code for that week will be released prior to Wednesday. I updated a good bit of the material in the first half of the course while teaching it live this summer, and am converting it into a new format that I think will make it More easily searchable. Allow self pacing vs video content where I control the pace. Be more accessible than trying to read closed captions while also watching the video content. Ensure all changes at each step of an example are displayed. Easier to find and review previous sections while writing your assignment code. I will continue using much of the content from last fall's refresh for the later half of the course. This content is primarily in video form. I'd like to know your thoughts on how the new textual format works for you. Please think about it while reading the new content and watching the older videos. Everyone learns differently, and I'm hoping the new format will help, especially when you need to review a past section.","title":"Using this site"},{"location":"LICENSE-Code.html","text":"Overview This is the LICENSE for all source code in this repository This does not include written content such as README.md files - see Content License for those files All source code examples hosted at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term is licensed under the Apache License, version 2.0. Full details of this license appear below. See https://tldrlegal.com/license/apache-license-2.0-(apache-2.0) for a quick summary of this license. Full License Text Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 Android Development 2021 Refresh Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Source Code License"},{"location":"LICENSE-Code.html#overview","text":"This is the LICENSE for all source code in this repository This does not include written content such as README.md files - see Content License for those files All source code examples hosted at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term is licensed under the Apache License, version 2.0. Full details of this license appear below. See https://tldrlegal.com/license/apache-license-2.0-(apache-2.0) for a quick summary of this license.","title":"Overview"},{"location":"LICENSE-Code.html#full-license-text","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 Android Development 2021 Refresh Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Full License Text"},{"location":"LICENSE-Content.html","text":"Overview This is the LICENSE for all non-code content in this repository. This covers all markdown files, such as README.md, as well as linked course videos hosted on youtube) See Source Code License for the license for source code in this repository The gist of the license: https://creativecommons.org/licenses/by-sa/2.0/ You can share with attribution as long as you include this license AND license any modifications with the same license Full License Text This text is also available at https://creativecommons.org/licenses/by-sa/2.0/legalcode Creative Commons Creative Commons Legal Code Attribution-ShareAlike 2.0 CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM ITS USE. License THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED. BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS. 1. Definitions \"Collective Work\" means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its entirety in unmodified form, along with a number of other contributions, constituting separate and independent works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be considered a Derivative Work (as defined below) for the purposes of this License. \"Derivative Work\" means a work based upon the Work or upon the Work and other pre-existing works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, the synchronization of the Work in timed-relation with a moving image (\"synching\") will be considered a Derivative Work for the purpose of this License. \"Licensor\" means the individual or entity that offers the Work under the terms of this License. \"Original Author\" means the individual or entity who created the Work. \"Work\" means the copyrightable work of authorship offered under the terms of this License. \"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation. \"License Elements\" means the following high-level license attributes as selected by Licensor and indicated in the title of this License: Attribution, ShareAlike. 2. Fair Use Rights. Nothing in this license is intended to reduce, limit, or restrict any rights arising from fair use, first sale or other limitations on the exclusive rights of the copyright owner under copyright law or other applicable laws. 3. License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below: to reproduce the Work, to incorporate the Work into one or more Collective Works, and to reproduce the Work as incorporated in the Collective Works; to create and reproduce Derivative Works; to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission the Work including as incorporated in Collective Works; to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission Derivative Works. For the avoidance of doubt, where the work is a musical composition: Performance Royalties Under Blanket Licenses. Licensor waives the exclusive right to collect, whether individually or via a performance rights society (e.g. ASCAP, BMI, SESAC), royalties for the public performance or public digital performance (e.g. webcast) of the Work. Mechanical Rights and Statutory Royalties. Licensor waives the exclusive right to collect, whether individually or via a music rights society or designated agent (e.g. Harry Fox Agency), royalties for any phonorecord You create from the Work (\"cover version\") and distribute, subject to the compulsory license created by 17 USC Section 115 of the US Copyright Act (or the equivalent in other jurisdictions). Webcasting Rights and Statutory Royalties. For the avoidance of doubt, where the Work is a sound recording, Licensor waives the exclusive right to collect, whether individually or via a performance-rights society (e.g. SoundExchange), royalties for the public digital performance (e.g. webcast) of the Work, subject to the compulsory license created by 17 USC Section 114 of the US Copyright Act (or the equivalent in other jurisdictions). The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats. All rights not expressly granted by Licensor are hereby reserved. 4. Restrictions.The license granted in Section 3 above is expressly made subject to and limited by the following restrictions: You may distribute, publicly display, publicly perform, or publicly digitally perform the Work only under the terms of this License, and You must include a copy of, or the Uniform Resource Identifier for, this License with every copy or phonorecord of the Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Work that alter or restrict the terms of this License or the recipients' exercise of the rights granted hereunder. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties. You may not distribute, publicly display, publicly perform, or publicly digitally perform the Work with any technological measures that control access or use of the Work in a manner inconsistent with the terms of this License Agreement. The above applies to the Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Work itself to be made subject to the terms of this License. If You create a Collective Work, upon notice from any Licensor You must, to the extent practicable, remove from the Collective Work any reference to such Licensor or the Original Author, as requested. If You create a Derivative Work, upon notice from any Licensor You must, to the extent practicable, remove from the Derivative Work any reference to such Licensor or the Original Author, as requested. You may distribute, publicly display, publicly perform, or publicly digitally perform a Derivative Work only under the terms of this License, a later version of this License with the same License Elements as this License, or a Creative Commons iCommons license that contains the same License Elements as this License (e.g. Attribution-ShareAlike 2.0 Japan). You must include a copy of, or the Uniform Resource Identifier for, this License or other license specified in the previous sentence with every copy or phonorecord of each Derivative Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Derivative Works that alter or restrict the terms of this License or the recipients' exercise of the rights granted hereunder, and You must keep intact all notices that refer to this License and to the disclaimer of warranties. You may not distribute, publicly display, publicly perform, or publicly digitally perform the Derivative Work with any technological measures that control access or use of the Work in a manner inconsistent with the terms of this License Agreement. The above applies to the Derivative Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Derivative Work itself to be made subject to the terms of this License. If you distribute, publicly display, publicly perform, or publicly digitally perform the Work or any Derivative Works or Collective Works, You must keep intact all copyright notices for the Work and give the Original Author credit reasonable to the medium or means You are utilizing by conveying the name (or pseudonym if applicable) of the Original Author if supplied; the title of the Work if supplied; to the extent reasonably practicable, the Uniform Resource Identifier, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and in the case of a Derivative Work, a credit identifying the use of the Work in the Derivative Work (e.g., \"French translation of the Work by Original Author,\" or \"Screenplay based on original Work by Original Author\"). Such credit may be implemented in any reasonable manner; provided, however, that in the case of a Derivative Work or Collective Work, at a minimum such credit will appear where any other comparable authorship credit appears and in a manner at least as prominent as such other comparable authorship credit. 5. Representations, Warranties and Disclaimer UNLESS OTHERWISE AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE MATERIALS, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU. 6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 7. Termination This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works or Collective Works from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License. Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above. 8. Miscellaneous Each time You distribute or publicly digitally perform the Work or a Collective Work, the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License. Each time You distribute or publicly digitally perform a Derivative Work, Licensor offers to the recipient a license to the original Work on the same terms and conditions as the license granted to You under this License. If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent. This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You. Creative Commons is not a party to this License, and makes no warranty whatsoever in connection with the Work. Creative Commons will not be liable to You or any party on any legal theory for any damages whatsoever, including without limitation any general, special, incidental or consequential damages arising in connection to this license. Notwithstanding the foregoing two (2) sentences, if Creative Commons has expressly identified itself as the Licensor hereunder, it shall have all rights and obligations of Licensor. Except for the limited purpose of indicating to the public that the Work is licensed under the CCPL, neither party will use the trademark \"Creative Commons\" or any related trademark or logo of Creative Commons without the prior written consent of Creative Commons. Any permitted use will be in compliance with Creative Commons' then-current trademark usage guidelines, as may be published on its website or otherwise made available upon request from time to time. Creative Commons may be contacted at https://creativecommons.org/.","title":"Content License"},{"location":"LICENSE-Content.html#overview","text":"This is the LICENSE for all non-code content in this repository. This covers all markdown files, such as README.md, as well as linked course videos hosted on youtube) See Source Code License for the license for source code in this repository The gist of the license: https://creativecommons.org/licenses/by-sa/2.0/ You can share with attribution as long as you include this license AND license any modifications with the same license","title":"Overview"},{"location":"LICENSE-Content.html#full-license-text","text":"This text is also available at https://creativecommons.org/licenses/by-sa/2.0/legalcode Creative Commons Creative Commons Legal Code Attribution-ShareAlike 2.0 CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM ITS USE. License THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED. BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS. 1. Definitions \"Collective Work\" means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its entirety in unmodified form, along with a number of other contributions, constituting separate and independent works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be considered a Derivative Work (as defined below) for the purposes of this License. \"Derivative Work\" means a work based upon the Work or upon the Work and other pre-existing works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, the synchronization of the Work in timed-relation with a moving image (\"synching\") will be considered a Derivative Work for the purpose of this License. \"Licensor\" means the individual or entity that offers the Work under the terms of this License. \"Original Author\" means the individual or entity who created the Work. \"Work\" means the copyrightable work of authorship offered under the terms of this License. \"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation. \"License Elements\" means the following high-level license attributes as selected by Licensor and indicated in the title of this License: Attribution, ShareAlike. 2. Fair Use Rights. Nothing in this license is intended to reduce, limit, or restrict any rights arising from fair use, first sale or other limitations on the exclusive rights of the copyright owner under copyright law or other applicable laws. 3. License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below: to reproduce the Work, to incorporate the Work into one or more Collective Works, and to reproduce the Work as incorporated in the Collective Works; to create and reproduce Derivative Works; to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission the Work including as incorporated in Collective Works; to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission Derivative Works. For the avoidance of doubt, where the work is a musical composition: Performance Royalties Under Blanket Licenses. Licensor waives the exclusive right to collect, whether individually or via a performance rights society (e.g. ASCAP, BMI, SESAC), royalties for the public performance or public digital performance (e.g. webcast) of the Work. Mechanical Rights and Statutory Royalties. Licensor waives the exclusive right to collect, whether individually or via a music rights society or designated agent (e.g. Harry Fox Agency), royalties for any phonorecord You create from the Work (\"cover version\") and distribute, subject to the compulsory license created by 17 USC Section 115 of the US Copyright Act (or the equivalent in other jurisdictions). Webcasting Rights and Statutory Royalties. For the avoidance of doubt, where the Work is a sound recording, Licensor waives the exclusive right to collect, whether individually or via a performance-rights society (e.g. SoundExchange), royalties for the public digital performance (e.g. webcast) of the Work, subject to the compulsory license created by 17 USC Section 114 of the US Copyright Act (or the equivalent in other jurisdictions). The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats. All rights not expressly granted by Licensor are hereby reserved. 4. Restrictions.The license granted in Section 3 above is expressly made subject to and limited by the following restrictions: You may distribute, publicly display, publicly perform, or publicly digitally perform the Work only under the terms of this License, and You must include a copy of, or the Uniform Resource Identifier for, this License with every copy or phonorecord of the Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Work that alter or restrict the terms of this License or the recipients' exercise of the rights granted hereunder. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties. You may not distribute, publicly display, publicly perform, or publicly digitally perform the Work with any technological measures that control access or use of the Work in a manner inconsistent with the terms of this License Agreement. The above applies to the Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Work itself to be made subject to the terms of this License. If You create a Collective Work, upon notice from any Licensor You must, to the extent practicable, remove from the Collective Work any reference to such Licensor or the Original Author, as requested. If You create a Derivative Work, upon notice from any Licensor You must, to the extent practicable, remove from the Derivative Work any reference to such Licensor or the Original Author, as requested. You may distribute, publicly display, publicly perform, or publicly digitally perform a Derivative Work only under the terms of this License, a later version of this License with the same License Elements as this License, or a Creative Commons iCommons license that contains the same License Elements as this License (e.g. Attribution-ShareAlike 2.0 Japan). You must include a copy of, or the Uniform Resource Identifier for, this License or other license specified in the previous sentence with every copy or phonorecord of each Derivative Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Derivative Works that alter or restrict the terms of this License or the recipients' exercise of the rights granted hereunder, and You must keep intact all notices that refer to this License and to the disclaimer of warranties. You may not distribute, publicly display, publicly perform, or publicly digitally perform the Derivative Work with any technological measures that control access or use of the Work in a manner inconsistent with the terms of this License Agreement. The above applies to the Derivative Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Derivative Work itself to be made subject to the terms of this License. If you distribute, publicly display, publicly perform, or publicly digitally perform the Work or any Derivative Works or Collective Works, You must keep intact all copyright notices for the Work and give the Original Author credit reasonable to the medium or means You are utilizing by conveying the name (or pseudonym if applicable) of the Original Author if supplied; the title of the Work if supplied; to the extent reasonably practicable, the Uniform Resource Identifier, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and in the case of a Derivative Work, a credit identifying the use of the Work in the Derivative Work (e.g., \"French translation of the Work by Original Author,\" or \"Screenplay based on original Work by Original Author\"). Such credit may be implemented in any reasonable manner; provided, however, that in the case of a Derivative Work or Collective Work, at a minimum such credit will appear where any other comparable authorship credit appears and in a manner at least as prominent as such other comparable authorship credit. 5. Representations, Warranties and Disclaimer UNLESS OTHERWISE AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE MATERIALS, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU. 6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 7. Termination This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works or Collective Works from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License. Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above. 8. Miscellaneous Each time You distribute or publicly digitally perform the Work or a Collective Work, the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License. Each time You distribute or publicly digitally perform a Derivative Work, Licensor offers to the recipient a license to the original Work on the same terms and conditions as the license granted to You under this License. If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent. This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You. Creative Commons is not a party to this License, and makes no warranty whatsoever in connection with the Work. Creative Commons will not be liable to You or any party on any legal theory for any damages whatsoever, including without limitation any general, special, incidental or consequential damages arising in connection to this license. Notwithstanding the foregoing two (2) sentences, if Creative Commons has expressly identified itself as the Licensor hereunder, it shall have all rights and obligations of Licensor. Except for the limited purpose of indicating to the public that the Work is licensed under the CCPL, neither party will use the trademark \"Creative Commons\" or any related trademark or logo of Creative Commons without the prior written consent of Creative Commons. Any permitted use will be in compliance with Creative Commons' then-current trademark usage guidelines, as may be published on its website or otherwise made available upon request from time to time. Creative Commons may be contacted at https://creativecommons.org/.","title":"Full License Text"},{"location":"contact.html","text":"Scott Stanchfield By day, Scott works at Google in Android Developer Relations. They usually tell him to go play with some (colorful) blocks in the corner (so everyone else can actually get some work done). By night, Scott can be found teaching Android Mobile Application Development and Kotlin programming for the JHU Whiting School. If it hadn\u2019t been for this pandemic, he\u2019d be swing dancing, singing Karaoke and attending musicals whenever they stop in Baltimore or DC. Scott's been a Software Developer/Architect for over 30 years. Some highlights: Worked for Tom McCabe, creator of the Cyclomatic Complexity metric. Worked for Frank DeRemer and Tom Penello, inventors of LALR parsing (the type of parsing used by the lex and yacc parser-generation tools) Worked for Terence Parr (creator of PCCS/ANTLR - which use LL parsing) Was on the ANSI C++ 1998 Standardization committee (don't blame him; he was only in the last two sessions and tried to stop it...) Spent four years as a Java corporate trainer throughout the world Wrote Effective VisualAge for Java, Version 3.5 in the late 90's Held the world record on Discs of Tron (arcade) in the mid 80's. Currently #3 at Twin Galaxies , and #2 on Arcade1Up's machine. A Few Pictures I'm a Noogler! Best. Glasses. Ever! (Part of my MC-3P0 costume) Wecome to the Hallcade. Had to do something with this awkward hall... Education History Bachelor of Arts Computer Science, The University of Michigan Master of Science Computer Science, The Johns Hopkins University Publications Please see http://www.javadude.com/publications/ Contact Information Website: https://javadude.com JHU Email: scott.stanchfield@jhu.edu (use for all class communication) Personal Email: scott@javadude.com (only use for non-class communication)","title":"About Your Instructor"},{"location":"contact.html#scott-stanchfield","text":"By day, Scott works at Google in Android Developer Relations. They usually tell him to go play with some (colorful) blocks in the corner (so everyone else can actually get some work done). By night, Scott can be found teaching Android Mobile Application Development and Kotlin programming for the JHU Whiting School. If it hadn\u2019t been for this pandemic, he\u2019d be swing dancing, singing Karaoke and attending musicals whenever they stop in Baltimore or DC. Scott's been a Software Developer/Architect for over 30 years. Some highlights: Worked for Tom McCabe, creator of the Cyclomatic Complexity metric. Worked for Frank DeRemer and Tom Penello, inventors of LALR parsing (the type of parsing used by the lex and yacc parser-generation tools) Worked for Terence Parr (creator of PCCS/ANTLR - which use LL parsing) Was on the ANSI C++ 1998 Standardization committee (don't blame him; he was only in the last two sessions and tried to stop it...) Spent four years as a Java corporate trainer throughout the world Wrote Effective VisualAge for Java, Version 3.5 in the late 90's Held the world record on Discs of Tron (arcade) in the mid 80's. Currently #3 at Twin Galaxies , and #2 on Arcade1Up's machine.","title":"Scott Stanchfield"},{"location":"contact.html#a-few-pictures","text":"I'm a Noogler! Best. Glasses. Ever! (Part of my MC-3P0 costume) Wecome to the Hallcade. Had to do something with this awkward hall...","title":"A Few Pictures"},{"location":"contact.html#education-history","text":"Bachelor of Arts Computer Science, The University of Michigan Master of Science Computer Science, The Johns Hopkins University","title":"Education History"},{"location":"contact.html#publications","text":"Please see http://www.javadude.com/publications/","title":"Publications"},{"location":"contact.html#contact-information","text":"Website: https://javadude.com JHU Email: scott.stanchfield@jhu.edu (use for all class communication) Personal Email: scott@javadude.com (only use for non-class communication)","title":"Contact Information"},{"location":"week-01/1.1-Introduction/index.html","text":"Note All of the content in this Introduction module is critical to your success in this class. I know it's not the most thrilling read, but please be sure to read it thoroughly. Course Content All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus. Your Actions Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction. Welcome! Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading. Content Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you. Sample Code Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available. If you haven\u2019t used git before... Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run git pull Kotlin Note All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool Online Video Tips Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit. Office Hours Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late) Questions If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Welcome!"},{"location":"week-01/1.1-Introduction/index.html#course-content","text":"All course content (https://androidbyexample.com) and the course sample repository (https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term) are free for use to anyone. Feel free to pass these links to friends and co-workers. For those viewing the content who are not enrolled in 605.686, please ignore any references to the Canvas site, assignments or syllabus.","title":"Course Content"},{"location":"week-01/1.1-Introduction/index.html#your-actions","text":"Please do the following Check that your email and phone numbers are correct in JHED and SIS. I'll use these to send announcements. If you saw this announcement in your email you should be ok. Please post in the \u201cIntroductions\u201d forum as described in the thread header. Note that there is only one thread; you cannot create separate threads for your introduction.","title":"Your Actions"},{"location":"week-01/1.1-Introduction/index.html#welcome","text":"Hi there! I'm Scott Stanchfield. Welcome to 605.686, Mobile Application Development for the Android Platform! Let me give you an overview of what we will be doing this semester and where you should begin. We'll be exploring Android application development, covering all sorts of topics including creation of user interfaces, storing data, and communicating with other devices and servers. You can see the full list of topics on this course site. Be sure to pay close attention to the Course Outline. It'll tell you which modules are covered each week as well as start and due dates for the assignments. Please be sure to read this entire note, the syllabus (on the Canvas site), and all sections in the Introduction module. There are lots of very important things in there that I will hold you accountable for. In particular, please pay attention to the academic integrity (I'm good at catching cheaters!) and \"Holistic\" grading (so you understand what your grades actually mean) sections. The syllabus is available via the \"Syllabus\" link on the left menu in Canvas. Note that we've migrated to a common syllabus management tool to ensure all the common university-level information is consistent and up-to-date across all courses. There's an Export button when viewing the Syllabus if you'd like to download and print it. The Introduction module goes into more detail on assignment expectations and grading.","title":"Welcome!"},{"location":"week-01/1.1-Introduction/index.html#content","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the https://androidbyexample.com site is provided only as additional information. I'm posting the course content that would normally appear in Canvas on https://androidbyexample.com. This allows a more custom experience. I'm trying out a new format that's less video-intensive, and hopefully will make it easier to locate information that you need. (Canvas currently doesn't allow custom CSS or Javascript and cannot support the features I'm trying to implement.) I'm not updating all of the material to this new format this term. When studying the content, text or video, please let me know which format works best for you.","title":"Content"},{"location":"week-01/1.1-Introduction/index.html#sample-code","text":"Note This applies to online sections of the course. If you are taking the class face-to-face/virtual-live, you are responsible for material covered in class (which will be recorded and posted), and the course samples site is only provided as supplemental material. All sample code is available at https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. Please install git and clone this repository. As I am currently updating the course, you'll need to pull changes when I announce that new content is available.","title":"Sample Code"},{"location":"week-01/1.1-Introduction/index.html#if-you-havent-used-git-before","text":"Download and install git from https://git-scm.com/ Create a directory to hold your git repositories. (I use c:\\users\\scott\\git on my windows machine, but you can put it anywhere you would like) Open a command prompt/terminal and change to that directory Run git clone https://gitlab.com/android-development-2022-refresh/605.686-2022-fall-term. (This will create a 605.686-2022-fall-term directory inside your git directory) Whenever I tell you to update the repository Open a command prompt/terminal and change to that android-development directory Run git pull","title":"If you haven\u2019t used git before..."},{"location":"week-01/1.1-Introduction/index.html#kotlin-note","text":"All assignments must be written in Kotlin. The text and videos in the course will talk through development environment setup and implementation using Kotlin and describe some of the concepts behind Kotlin along the way. I also teach a course in Kotlin (605.603) but it is not required for this course. It will, however, go into much more detail on the Kotlin language and I recommend everyone take it. Because, ya know, Kotlin is cool. Very, very cool","title":"Kotlin Note"},{"location":"week-01/1.1-Introduction/index.html#online-video-tips","text":"Some modules will link to video content. All videos are hosted on YouTube, and I\u2019ve enabled automatic closed captions/transcript. The transcript is useful for searching. To search videos: Click the \"...\" button under the video Choose \"Open Transcript\" Pause the video Press control-f (or whatever your browser\u2019s \"find\" command is) Type what you want to find Click on the transcript line you want to jump to and the video will jump there. Press play Note that the automatic transcripts are not perfect, but they can help you find what you\u2019re looking for (Eventually I\u2019ll be hand-editing them to improve accuracy). All videos were recorded and rendered at 1920x1080 (HD). That's the ideal size to watch them (if you\u2019re watching full screen. If you're watching non full-screen, with the transcript, you'll want to have your resolution set higher to reduce artifacts. Make sure the settings for the video playback are HD/1080p for the best image. I\u2019ve increased the font size in Android Studio when recording, but you\u2019ll want to be sure things are as clear as possible. Keep in mind that YouTube allows you to change the playback speed. Some students like to speed up or (more likely, as I talk quickly at times) slow down a bit.","title":"Online Video Tips"},{"location":"week-01/1.1-Introduction/index.html#office-hours","text":"Office Hours will be held each Monday from 7pm-8pm Eastern. Please use the \"Office Hours\" link from the Canvas site to enter the Zoom office hours session. Note that if no one shows up by 7:20p, I\u2019ll close the session (unless you have let me know in advance that you intend to come and will be late)","title":"Office Hours"},{"location":"week-01/1.1-Introduction/index.html#questions","text":"If you have questions during the course, please: Search using Google or StackOverflow for ideas. You can often find a response faster than I will see your question and respond. Check the forum and see if the question has been asked If the question isn't private (such as a question about your grades), please post it in the discussion forums If it's a private matter, please email me at scott.stanchfield@jhu.edu Please use the forums as much as possible for questions; many students often have the same questions and this makes it easy for everyone to learn. As you progress through the course, if you have comments about the content (things you really like, dislike, or how things can be done better ), please post in the Course Feedback forum or keep a log of your thoughts to send to me after the course is finished. (For those who are not enrolled in the course, please email me at scott@javadude.com with any comments or siggesti) If you have any questions or concerns while going through this course you may post them in the General Questions thread, located under Discussions on the left menu in Canvas or you may contact me directly at scott.stanchfield@jhu.edu. Additionally, you can refer to Help & Support on the left menu for a listing of all the student services and support available to you. Here's to a great term! -- Scott","title":"Questions"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html","text":"Hardware You do not need an Android device for your coursework, but if you have access to one (or want to purchase one for your coursework) development feels more realistic. Note that if you have low memory and/or do not have an SSD on your computer, an external device may help performance. For running Android Studio, the minimum recommended configuration is 8GB RAM with an SSD. More memory is better, as Android Studio and the Android emulator love to use lots of memory. Ideally you'll have 16GB or more RAM. If you have only 8GB RAM, I strongly recommend you either upgrade your RAM or purchase an inexpensive Android phone for classwork. Many pay-as-you-go phones (which you do not have to activate) can be found for under $100 and will greatly improve your development experience. Software The following are the required versions of tools for this term. Please keep a copy of all downloaded installation files in case you need to reinstall during the term! Warning Do not upgrade any versions after the first module unless I instruct you to do so! We want to make sure we're using the same version of everything that you are when we grade your assignment submissions. Name Version Android Studio https://developer.android.com/studio/preview Dolphin (2021.3.1 RC 1) Kotlin (plugin version in build.gradle) 1.7.10 Jetpack Compose UI (compose_ui_version in build.gradle) 1.2.1 Jetpack Compose Compiler (compose_compiler_version in build.gradle) 1.3.0 Android minimum API (minSdk in app/build.gradle) 21 Android target API (targetSdk in app/build.gradle) 32 Android compile API (compileSdk in app/build.gradle) 32 Sample Code See the \"Sample Code\" module for download and usage instructions If you see any problems in the sample code, please let me know and I'll update it.","title":"Course Hardware and Software"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#hardware","text":"You do not need an Android device for your coursework, but if you have access to one (or want to purchase one for your coursework) development feels more realistic. Note that if you have low memory and/or do not have an SSD on your computer, an external device may help performance. For running Android Studio, the minimum recommended configuration is 8GB RAM with an SSD. More memory is better, as Android Studio and the Android emulator love to use lots of memory. Ideally you'll have 16GB or more RAM. If you have only 8GB RAM, I strongly recommend you either upgrade your RAM or purchase an inexpensive Android phone for classwork. Many pay-as-you-go phones (which you do not have to activate) can be found for under $100 and will greatly improve your development experience.","title":"Hardware"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#software","text":"The following are the required versions of tools for this term. Please keep a copy of all downloaded installation files in case you need to reinstall during the term! Warning Do not upgrade any versions after the first module unless I instruct you to do so! We want to make sure we're using the same version of everything that you are when we grade your assignment submissions. Name Version Android Studio https://developer.android.com/studio/preview Dolphin (2021.3.1 RC 1) Kotlin (plugin version in build.gradle) 1.7.10 Jetpack Compose UI (compose_ui_version in build.gradle) 1.2.1 Jetpack Compose Compiler (compose_compiler_version in build.gradle) 1.3.0 Android minimum API (minSdk in app/build.gradle) 21 Android target API (targetSdk in app/build.gradle) 32 Android compile API (compileSdk in app/build.gradle) 32","title":"Software"},{"location":"week-01/1.1-Introduction/STEP_10_FULL.html#sample-code","text":"See the \"Sample Code\" module for download and usage instructions If you see any problems in the sample code, please let me know and I'll update it.","title":"Sample Code"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html","text":"Late Submissions Late submissions will be reduced by one letter grade (1 point) for each DAY (or partial day) late (no exceptions without timely prior coordination with the instructors). See the grading policy for assignment grading details. Note If you expect any issues with turning in work on time, please see the instructor as soon as you know. If I know in advance about travel, expected high workloads or other issues, I can work with you. However, letting me know a day or two before an assignment is due is not acceptable (If an emergency occurs, please let me know as soon as possible afterwards.) Note If you encounter issues while trying to submit your assignment, please immediately send me an email with your submission text and a note stating that Canvas is being your best friend. If you submit in this manner, I will not count your submission as late. Note that the easiest way to get a lower grade is to turn in your assignments late. If you know that something is coming up (business/vacation travel, expected very busy week at work, medical, expected baby) please let me know and I'm happy to work with you. Commit Often!!! Note: I highly recommend that you store your code in a version control system such as subversion or git. However, if you host your project on a public site like github, you must make the repositories private! (Note that bitbucket provides free private repositories) Any non-private repositories that I find online will automatically set your grade to \"F\" for sharing code. Be sure to control your source code! Lost code will not be accepted as an excuse for late or missing assignments. General guidelines for grade ranges These are general guidelines, not absolute descriptions of a grading level. Your overall grade on an assignment depends on the overall quality and functionality of your submission. Again, these are general guidelines. You can get lower grades for very significant problems in your submissions and very late submissions. Letter Grade Common Reasons for the Grade A On time AND Working AND Good design B Missing required functionality Not quite working Bad design/bad style One day late (but would have otherwise been an \"A\") C Many missing functions Will not compile Will not execute properly Very bad design One day late (but would have been an \"B\") Two days late (but would have been an \"A\") F Little apparent effort Plagiarism Three or more days late Not turned in I grade on the following aspects of your submissions. Note that there is no specific percentage allocation for each of these concepts. Aspect What I Look For Design Does the design use the patterns discussed in class properly? Does the design fit the problem? Is the program designed with a maintenance programmer in mind? Can I determine why you did things the way you did by reading code and comments? Function Is all required function present? Is any non-required function present? (grade deduction) Does present function work properly? Style and Coding Conventions Is the code readable? Can I easily figure out what it's doing just by reading the code? Does the code follow the required coding conventions? Note: Not following the required coding conventions, even once in a submission, maximizes your assignment grade at A- Timeliness Was the assignment submitted on time? one day late = 1-point grade deduction two days late = 2-point grade deduction ... Coding Conventions All assignments must observe the following coding conventions. Why? I read your code Sometimes your code doesn't work correctly (sometimes spectacularly so...). Before I decide on the grade to give you, I carefully read the code to try to figure out why it didn't work. If the reason is a small, subtle thing, I'll often give more credit (rather than simply saying \"doesn't work; you get a C\") I often have to do this for several assignments. If the code is readable, using meaning variable, method and class names, I can often find the problems more quickly. Keep in mind that I have many submissions to review each time, and usually 20% or more have some big issues. This also helps a good bit when some of you are having trouble before submitting and ask for help. If I can read the code, I can figure out what's going on and respond that much more quickly. Indentation must be consistent. Use either spaces or tabs, but not both! All type names must follow Upper-Camel Case ShoppingCart ObjectDrawingApplet All variable and method names must follow Lower-Camel Case drawObject() numberOfObjectsOnScreen Type, variable and method names shall be a series of full words, not abbreviations or single letters. Standard acronyms are acceptable (such as url), but names like \"c\" are generally not acceptable. If you aren't sure whether a name is acceptable, feel free to ask me, but remember the rule of thumb: it should sound exactly like what it's being used for. Some Exceptions (based on common, understood usage) integer counters in loops can be named i, j, k the \"current number\" for walking through an array or counting items can be n e for an exception in a catch block All classes and interfaces must be contained in a Kotlin package All Kotlin package names must be completely lower-case and start with lastname.firstname.hw# where the # is the homework number. For example, I might have a project named \"stanchfield.scott.hw4\"(with the same Android package name) that contains Kotlin packages: stanchfield.scott.hw4 stanchfield.scott.hw4.model stanchfield.scott.hw4.database All projects must be named HW1, HW2, HW3 and so forth All submission zip files must be named lastname . firstname .HW1.zip, lastname . firstname .HW2.zip, etc All string literals that would appear for the user (typically text in TextViews, dialogs, toasts, etc) must be externalized into the strings.xml file. This is a really good habit to get into upfront, and you should always do this in any application you create to make localization simpler. Note This means all user-facing text. Any string constants that the user could see, whether used in your XML files or Kotlin code, must be externalized.","title":"Assignments"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#late-submissions","text":"Late submissions will be reduced by one letter grade (1 point) for each DAY (or partial day) late (no exceptions without timely prior coordination with the instructors). See the grading policy for assignment grading details. Note If you expect any issues with turning in work on time, please see the instructor as soon as you know. If I know in advance about travel, expected high workloads or other issues, I can work with you. However, letting me know a day or two before an assignment is due is not acceptable (If an emergency occurs, please let me know as soon as possible afterwards.) Note If you encounter issues while trying to submit your assignment, please immediately send me an email with your submission text and a note stating that Canvas is being your best friend. If you submit in this manner, I will not count your submission as late. Note that the easiest way to get a lower grade is to turn in your assignments late. If you know that something is coming up (business/vacation travel, expected very busy week at work, medical, expected baby) please let me know and I'm happy to work with you.","title":"Late Submissions"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#commit-often","text":"Note: I highly recommend that you store your code in a version control system such as subversion or git. However, if you host your project on a public site like github, you must make the repositories private! (Note that bitbucket provides free private repositories) Any non-private repositories that I find online will automatically set your grade to \"F\" for sharing code. Be sure to control your source code! Lost code will not be accepted as an excuse for late or missing assignments.","title":"Commit Often!!!"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#general-guidelines-for-grade-ranges","text":"These are general guidelines, not absolute descriptions of a grading level. Your overall grade on an assignment depends on the overall quality and functionality of your submission. Again, these are general guidelines. You can get lower grades for very significant problems in your submissions and very late submissions. Letter Grade Common Reasons for the Grade A On time AND Working AND Good design B Missing required functionality Not quite working Bad design/bad style One day late (but would have otherwise been an \"A\") C Many missing functions Will not compile Will not execute properly Very bad design One day late (but would have been an \"B\") Two days late (but would have been an \"A\") F Little apparent effort Plagiarism Three or more days late Not turned in I grade on the following aspects of your submissions. Note that there is no specific percentage allocation for each of these concepts. Aspect What I Look For Design Does the design use the patterns discussed in class properly? Does the design fit the problem? Is the program designed with a maintenance programmer in mind? Can I determine why you did things the way you did by reading code and comments? Function Is all required function present? Is any non-required function present? (grade deduction) Does present function work properly? Style and Coding Conventions Is the code readable? Can I easily figure out what it's doing just by reading the code? Does the code follow the required coding conventions? Note: Not following the required coding conventions, even once in a submission, maximizes your assignment grade at A- Timeliness Was the assignment submitted on time? one day late = 1-point grade deduction two days late = 2-point grade deduction ...","title":"General guidelines for grade ranges"},{"location":"week-01/1.1-Introduction/STEP_20_FULL.html#coding-conventions","text":"All assignments must observe the following coding conventions. Why? I read your code Sometimes your code doesn't work correctly (sometimes spectacularly so...). Before I decide on the grade to give you, I carefully read the code to try to figure out why it didn't work. If the reason is a small, subtle thing, I'll often give more credit (rather than simply saying \"doesn't work; you get a C\") I often have to do this for several assignments. If the code is readable, using meaning variable, method and class names, I can often find the problems more quickly. Keep in mind that I have many submissions to review each time, and usually 20% or more have some big issues. This also helps a good bit when some of you are having trouble before submitting and ask for help. If I can read the code, I can figure out what's going on and respond that much more quickly. Indentation must be consistent. Use either spaces or tabs, but not both! All type names must follow Upper-Camel Case ShoppingCart ObjectDrawingApplet All variable and method names must follow Lower-Camel Case drawObject() numberOfObjectsOnScreen Type, variable and method names shall be a series of full words, not abbreviations or single letters. Standard acronyms are acceptable (such as url), but names like \"c\" are generally not acceptable. If you aren't sure whether a name is acceptable, feel free to ask me, but remember the rule of thumb: it should sound exactly like what it's being used for. Some Exceptions (based on common, understood usage) integer counters in loops can be named i, j, k the \"current number\" for walking through an array or counting items can be n e for an exception in a catch block All classes and interfaces must be contained in a Kotlin package All Kotlin package names must be completely lower-case and start with lastname.firstname.hw# where the # is the homework number. For example, I might have a project named \"stanchfield.scott.hw4\"(with the same Android package name) that contains Kotlin packages: stanchfield.scott.hw4 stanchfield.scott.hw4.model stanchfield.scott.hw4.database All projects must be named HW1, HW2, HW3 and so forth All submission zip files must be named lastname . firstname .HW1.zip, lastname . firstname .HW2.zip, etc All string literals that would appear for the user (typically text in TextViews, dialogs, toasts, etc) must be externalized into the strings.xml file. This is a really good habit to get into upfront, and you should always do this in any application you create to make localization simpler. Note This means all user-facing text. Any string constants that the user could see, whether used in your XML files or Kotlin code, must be externalized.","title":"Coding Conventions"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html","text":"Points Assignments are worth 4 points each, mapping to GPA letters. My grader and I assign letter grades first, then convert them to numbers and apply late penalties. The grading scale from letters to numbers is as follows: Letter Grade Numerical Equivalent A 4.0 A- 3.7 (A/B border) 3.5 B+ 3.3 B 3.0 B- 2.7 (B/C border) 2.5 C+ 2.3 C 2.0 C- 1.7 (C/D border) 1.5 D+ 1.3 D 1.0 D- 0.7 F 0 Note that there is no A+. We had been reserving that for \"exemplary\" submissions, but some students considered an \"A\" as lost points. Your final grade WILL NOT include +/- designations. A/A- both count as \"A\" and \"4\" for University GPA purposes(and similar for other letter grades). Late Penalty Each day late results in 1 full letter grade (1 point) off. This is to prevent cascading lateness. In the past students would submit an assignment a week late and have one week less to do the next assignment, which would often result in that assignment being late as well. The also made it difficult to discus assignments until all were submitted. When grading assignments, we will write comments describing your grade, but we will usually not note specific point-value deductions (see \"Holistic Grading\" below). Some comments are \"for your information\"/\"helpful hints\" and will be marked to indicate that they have no effect on the grade. If you disagree with a grade you can ask us to review it. Tell us what your concerns are and we'll look at it. Sometimes we may miss something in your code. If we note a problem with a submission that was also noted for a previous submission, we will not count off for it. (If we do, please let use know and we'll correct the grade.) \"Holistic\" Grading I started out using a rubric to grade. For many reasons, this almost never reflected reality, so after a few terms, I realized a much fairer scheme, that I call \"holistic grading\" First, some problems with Rubrics... Gaming the System When I had point counts next to features, many students would decide which features to implement based on how many points they felt they could afford to lose. Rather than implement all function (the point of which is to exercise important techniques), they would implement a subset just to \"get the grade\". This is frustrating for a teacher because we design exercises to be sure students have had the opportunity to try out important techniques. \"Sum of the Parts\" vs \"The Whole\" Rubrics tend to cut both ways when the points are added up... Sometimes, a few relatively minor things that don't greatly impact the overall submission would numerically push the grade into \"B\" territory or lower. This didn't feel fair to the student based on the overall result, but to be fair to all students I had to stick with the grade based off the rubric. Other times, small things that made an impact when combined could result in an \"A\" that didn't feel right (sometimes because of gaming the system, other times because the small problems really added up). \"That shouldn't be n points off\" The most common complaint would be that either the rubric was unfair in the number of points it assigned to a specific item, or that I was applying a rubric item too broadly to a problem in the submission. Most of the time I would leave the grade as-is, but in some cases it was a matter of a possible alternative interpretation of the assignment requirements, in which case I adjusted the points off. Later, after I stopped using rubrics, but would list points deductions on assignment comments, I'd get the same complaints. In either case, this never made any significant difference in the grade for the assignment, or the course. Students ended up spending a good bit of time trying to figure out which items they could argue to get a few points back, not realizing a few points over the term made no effective difference. This led me to... \"Holistic Grading\" (If it sounds a little \"New Age\", it's not... \"Holistic\" here simply means \"looking at the whole\") \"This feels like a B+\"... My grader and I write comments about what we see in the assignment, and don't write specific deductions for each one. We look at the overall result, taking all comments into account, and say \"that's an A\", or \"that's a B-\", or \"that's barely anything more than the sample code\" (at which point we estimate the % of the assignment that was done and assign that number). The letters we assign are converted to numbers. A=4.0, A-=3.7, etc. When coming up with these letters, one of my key concepts is \"things that cap the grade at A-\". There's not a fixed list of such items, but things like \"coding conventions\" fall into this category. If several small things like these happen, a rubric may have pushed the grade into \"B\" territory. When I see several little things but otherwise the overall submission feels like an \"A\", I use \"A-\" as the grade. Note that if there are \"cap\" items as well as bigger issues, the \"cap\" items won't push the grade lower than the bigger issues already would have. Usually, if features are missing or not implemented per the assignment description, I start thinking \"B\", but if they're very minor features or present but not quite what was explicitly stated in the assignment description, and otherwise the assignment looked good, I'll go with \"A-\". Because of this, \"A-\" is often the most common grade for an assignment. If the assignment does everything we ask, in the ways I taught in class, meets coding standards, and is on time, that's where \"A\" comes in. Other grades (before late deductions) are usually driven by Feature omissions or problems Most common: something is missing or doesn't work properly This is often because a student started work a few days before the assignment was due and didn't have time to ask questions or study the concepts. Crashes and compilation errors Note that we try to make your code work before grading it. Sometimes it's an inverted boolean expression, and if we can get it working and it's something simple, we'll give a better grade than \"doesn't work\". However, sometimes, after spending an hour or two trying to get it to work, we have to give up... Working together or Plagiarism I've caught many students doing this... Sometimes they even try to submit something they found online that doesn't match the assignment description or is very obviously not based on what I've taught. Bottom line: When you see a \"3.7\" for a submission, don't think of it as \"0.3 points off\". Think of it as a few minor things aren't right. If that's how most of your assignments go, that's an \"A\" for the course... Distribution of Grades It is possible (and has happened in past sections) for everyone to get an \"A\" in this course. I will not be applying any sort of curve or other means to artificially distribute grades. I will be looking closely at your efforts in this class when determining your final grades. An \"A\" grade in this course requires a good deal of effort. Do not expect an \"A\" if you start programming a few nights before they are due... Let me repeat that. Do not expect an \"A\" if you start programming assignments a few nights before they are due... This has often been the reason for B and C grades in the course; students do not allow enough time to ask clarifying questions or do the coding. Be sure to at least look over and understand the assignments at the beginning of the week they are assigned! This will give you time to ask questions. If you do all the work well and on-time, you will get an \"A\" for the course. If you do all of the work on-time but are having trouble with the concepts, you'll likely get a \"B\" for the course. If you're in danger of a lower grade, I will speak with you as soon as it becomes apparent to me.","title":"Grading"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#points","text":"Assignments are worth 4 points each, mapping to GPA letters. My grader and I assign letter grades first, then convert them to numbers and apply late penalties. The grading scale from letters to numbers is as follows: Letter Grade Numerical Equivalent A 4.0 A- 3.7 (A/B border) 3.5 B+ 3.3 B 3.0 B- 2.7 (B/C border) 2.5 C+ 2.3 C 2.0 C- 1.7 (C/D border) 1.5 D+ 1.3 D 1.0 D- 0.7 F 0 Note that there is no A+. We had been reserving that for \"exemplary\" submissions, but some students considered an \"A\" as lost points. Your final grade WILL NOT include +/- designations. A/A- both count as \"A\" and \"4\" for University GPA purposes(and similar for other letter grades).","title":"Points"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#late-penalty","text":"Each day late results in 1 full letter grade (1 point) off. This is to prevent cascading lateness. In the past students would submit an assignment a week late and have one week less to do the next assignment, which would often result in that assignment being late as well. The also made it difficult to discus assignments until all were submitted. When grading assignments, we will write comments describing your grade, but we will usually not note specific point-value deductions (see \"Holistic Grading\" below). Some comments are \"for your information\"/\"helpful hints\" and will be marked to indicate that they have no effect on the grade. If you disagree with a grade you can ask us to review it. Tell us what your concerns are and we'll look at it. Sometimes we may miss something in your code. If we note a problem with a submission that was also noted for a previous submission, we will not count off for it. (If we do, please let use know and we'll correct the grade.)","title":"Late Penalty"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#holistic-grading","text":"I started out using a rubric to grade. For many reasons, this almost never reflected reality, so after a few terms, I realized a much fairer scheme, that I call \"holistic grading\" First, some problems with Rubrics... Gaming the System When I had point counts next to features, many students would decide which features to implement based on how many points they felt they could afford to lose. Rather than implement all function (the point of which is to exercise important techniques), they would implement a subset just to \"get the grade\". This is frustrating for a teacher because we design exercises to be sure students have had the opportunity to try out important techniques. \"Sum of the Parts\" vs \"The Whole\" Rubrics tend to cut both ways when the points are added up... Sometimes, a few relatively minor things that don't greatly impact the overall submission would numerically push the grade into \"B\" territory or lower. This didn't feel fair to the student based on the overall result, but to be fair to all students I had to stick with the grade based off the rubric. Other times, small things that made an impact when combined could result in an \"A\" that didn't feel right (sometimes because of gaming the system, other times because the small problems really added up). \"That shouldn't be n points off\" The most common complaint would be that either the rubric was unfair in the number of points it assigned to a specific item, or that I was applying a rubric item too broadly to a problem in the submission. Most of the time I would leave the grade as-is, but in some cases it was a matter of a possible alternative interpretation of the assignment requirements, in which case I adjusted the points off. Later, after I stopped using rubrics, but would list points deductions on assignment comments, I'd get the same complaints. In either case, this never made any significant difference in the grade for the assignment, or the course. Students ended up spending a good bit of time trying to figure out which items they could argue to get a few points back, not realizing a few points over the term made no effective difference. This led me to... \"Holistic Grading\" (If it sounds a little \"New Age\", it's not... \"Holistic\" here simply means \"looking at the whole\") \"This feels like a B+\"... My grader and I write comments about what we see in the assignment, and don't write specific deductions for each one. We look at the overall result, taking all comments into account, and say \"that's an A\", or \"that's a B-\", or \"that's barely anything more than the sample code\" (at which point we estimate the % of the assignment that was done and assign that number). The letters we assign are converted to numbers. A=4.0, A-=3.7, etc. When coming up with these letters, one of my key concepts is \"things that cap the grade at A-\". There's not a fixed list of such items, but things like \"coding conventions\" fall into this category. If several small things like these happen, a rubric may have pushed the grade into \"B\" territory. When I see several little things but otherwise the overall submission feels like an \"A\", I use \"A-\" as the grade. Note that if there are \"cap\" items as well as bigger issues, the \"cap\" items won't push the grade lower than the bigger issues already would have. Usually, if features are missing or not implemented per the assignment description, I start thinking \"B\", but if they're very minor features or present but not quite what was explicitly stated in the assignment description, and otherwise the assignment looked good, I'll go with \"A-\". Because of this, \"A-\" is often the most common grade for an assignment. If the assignment does everything we ask, in the ways I taught in class, meets coding standards, and is on time, that's where \"A\" comes in. Other grades (before late deductions) are usually driven by Feature omissions or problems Most common: something is missing or doesn't work properly This is often because a student started work a few days before the assignment was due and didn't have time to ask questions or study the concepts. Crashes and compilation errors Note that we try to make your code work before grading it. Sometimes it's an inverted boolean expression, and if we can get it working and it's something simple, we'll give a better grade than \"doesn't work\". However, sometimes, after spending an hour or two trying to get it to work, we have to give up... Working together or Plagiarism I've caught many students doing this... Sometimes they even try to submit something they found online that doesn't match the assignment description or is very obviously not based on what I've taught. Bottom line: When you see a \"3.7\" for a submission, don't think of it as \"0.3 points off\". Think of it as a few minor things aren't right. If that's how most of your assignments go, that's an \"A\" for the course...","title":"\"Holistic\" Grading"},{"location":"week-01/1.1-Introduction/STEP_30_FULL.html#distribution-of-grades","text":"It is possible (and has happened in past sections) for everyone to get an \"A\" in this course. I will not be applying any sort of curve or other means to artificially distribute grades. I will be looking closely at your efforts in this class when determining your final grades. An \"A\" grade in this course requires a good deal of effort. Do not expect an \"A\" if you start programming a few nights before they are due... Let me repeat that. Do not expect an \"A\" if you start programming assignments a few nights before they are due... This has often been the reason for B and C grades in the course; students do not allow enough time to ask clarifying questions or do the coding. Be sure to at least look over and understand the assignments at the beginning of the week they are assigned! This will give you time to ask questions. If you do all the work well and on-time, you will get an \"A\" for the course. If you do all of the work on-time but are having trouble with the concepts, you'll likely get a \"B\" for the course. If you're in danger of a lower grade, I will speak with you as soon as it becomes apparent to me.","title":"Distribution of Grades"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html","text":"Using Third-Party Code When writing your assignments, you may copy small sections of code and other content you find online if and only if you attribute it and the code is freely copyable with a license that says it's ok to copy. Place a comment above the copied section stating where you found it and the license that applies. Using code from stackoverflow If you're using code from https://stackoverflow.com, note that all code and content is licensed CREATIVE COMMONS \u2013 ATTRIBUTION \u2013 SHARE-ALIKE (CC-BY-SA 3.0) (see https://creativecommons.org/licenses/by-sa/3.0/us/). Warning THIS IS A VIRAL LICENSE!!! This means that any code/content you copy forces you to make your project be licensed CC-BY-SA 3.0!!! This is nearly always a no-no with companies you work for and the government! Note Some code or content may contain additional licenses. For example, when Googlers write code snippets on stackoverflow, they'll add something like // Copyright 2022 Google LLC. // SPDX-License-Identifier: Apache-2.0 at the top of their code to indicate that it's also licensed under the Apache 2.0 license. In this case, it's ok to use the code as long as you adhere to the Apache 2.0 license. For your assignment submissions in this course, copying any content from stackoverflow is fine. In real life, unless the content has a more permissive license, such as Apache 2.0, do not copy code from stackoverflow ! To use stackoverflow safely: Use \u201cclean room\u201d approach Read and understand Close the browser Then write your code Using Course Sample Code You may copy code from my class examples as well. Once again, you must attribute it. Add a comment at the top of your assignment submission source files that states that you're using sample code from the course. Code from the course sample code repository is licensed Apache 2 (see the LICENSE-code.md file in the repository) and can be used/incorporated into your own projects with attribution. Note that this code is generally not well-tested and may contain bugs. If you find something that doesn't work, please let me know and I'll update the samples. Code that I write live in face-to-face class or post in a discussion forum is not licensed for any use outside this class. You may not post or distribute any this code for any purpose other than writing your assignments.","title":"Using Third-Party and Course Sample Code"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-third-party-code","text":"When writing your assignments, you may copy small sections of code and other content you find online if and only if you attribute it and the code is freely copyable with a license that says it's ok to copy. Place a comment above the copied section stating where you found it and the license that applies.","title":"Using Third-Party Code"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-code-from-stackoverflow","text":"If you're using code from https://stackoverflow.com, note that all code and content is licensed CREATIVE COMMONS \u2013 ATTRIBUTION \u2013 SHARE-ALIKE (CC-BY-SA 3.0) (see https://creativecommons.org/licenses/by-sa/3.0/us/). Warning THIS IS A VIRAL LICENSE!!! This means that any code/content you copy forces you to make your project be licensed CC-BY-SA 3.0!!! This is nearly always a no-no with companies you work for and the government! Note Some code or content may contain additional licenses. For example, when Googlers write code snippets on stackoverflow, they'll add something like // Copyright 2022 Google LLC. // SPDX-License-Identifier: Apache-2.0 at the top of their code to indicate that it's also licensed under the Apache 2.0 license. In this case, it's ok to use the code as long as you adhere to the Apache 2.0 license. For your assignment submissions in this course, copying any content from stackoverflow is fine. In real life, unless the content has a more permissive license, such as Apache 2.0, do not copy code from stackoverflow ! To use stackoverflow safely: Use \u201cclean room\u201d approach Read and understand Close the browser Then write your code","title":"Using code from stackoverflow"},{"location":"week-01/1.1-Introduction/STEP_40_FULL.html#using-course-sample-code","text":"You may copy code from my class examples as well. Once again, you must attribute it. Add a comment at the top of your assignment submission source files that states that you're using sample code from the course. Code from the course sample code repository is licensed Apache 2 (see the LICENSE-code.md file in the repository) and can be used/incorporated into your own projects with attribution. Note that this code is generally not well-tested and may contain bugs. If you find something that doesn't work, please let me know and I'll update the samples. Code that I write live in face-to-face class or post in a discussion forum is not licensed for any use outside this class. You may not post or distribute any this code for any purpose other than writing your assignments.","title":"Using Course Sample Code"},{"location":"week-01/1.2-Android-studio/index.html","text":"Video Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript . Example Source See https://gitlab.com/android-development-2022-refresh/android-studio","title":"Android Studio"},{"location":"week-01/1.2-Android-studio/index.html#video","text":"Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript .","title":"Video"},{"location":"week-01/1.2-Android-studio/index.html#example-source","text":"See https://gitlab.com/android-development-2022-refresh/android-studio","title":"Example Source"},{"location":"week-01/1.3-Activities/index.html","text":"Introduction Activities are the main \"screens\" of your application. You can have a single activity and swap out the user-interface elements (which will be our strategy for this course), or navigate between multiple activities. In this module, we'll look at activities from a high level and take a quick peek at how the \"old school\" View setup works. We won't be using Views (other than Google Map) for this class, but you should be familiar with them. Objectives Understand how the Android system manages the lifecycle of an Activity, and some of the callbacks you can implement to become aware of changes in Activity state Shudder when you see the XML that you used to have to write for user interfaces. Smile knowing that the newer ways of writing user interfaces are much simpler and more direct. Videos Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript . Lecture: Activities Example: Activities Note This video shows how activities used to be created, to contrast with how we'll be creating applications in this class. Jetpack Compose makes thing much simpler, but this example is important, as you'll likely see applications using the old view-based approach. The application structure remains similar, as we'll use some XML resources (primarily string localizations). Example Source See https://gitlab.com/android-development-2022-refresh/android-studio","title":"Activities and Application Structure Overview"},{"location":"week-01/1.3-Activities/index.html#introduction","text":"Activities are the main \"screens\" of your application. You can have a single activity and swap out the user-interface elements (which will be our strategy for this course), or navigate between multiple activities. In this module, we'll look at activities from a high level and take a quick peek at how the \"old school\" View setup works. We won't be using Views (other than Google Map) for this class, but you should be familiar with them.","title":"Introduction"},{"location":"week-01/1.3-Activities/index.html#objectives","text":"Understand how the Android system manages the lifecycle of an Activity, and some of the callbacks you can implement to become aware of changes in Activity state Shudder when you see the XML that you used to have to write for user interfaces. Smile knowing that the newer ways of writing user interfaces are much simpler and more direct.","title":"Objectives"},{"location":"week-01/1.3-Activities/index.html#videos","text":"Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript .","title":"Videos"},{"location":"week-01/1.3-Activities/index.html#lecture-activities","text":"","title":"Lecture: Activities"},{"location":"week-01/1.3-Activities/index.html#example-activities","text":"Note This video shows how activities used to be created, to contrast with how we'll be creating applications in this class. Jetpack Compose makes thing much simpler, but this example is important, as you'll likely see applications using the old view-based approach. The application structure remains similar, as we'll use some XML resources (primarily string localizations).","title":"Example: Activities"},{"location":"week-01/1.3-Activities/index.html#example-source","text":"See https://gitlab.com/android-development-2022-refresh/android-studio","title":"Example Source"},{"location":"week-02/2.1-Kotlin-primer/index.html","text":"Introduction Kotlin is a fantastic new language that we'll be using to create our Android Applications. In this module, we'll quickly explore the basics of the language from a Java perspective. During the rest of the course, I'll often explain some of these concepts in more detail. Objectives Understand the basic structure of Kotlin classes, properties and functions Use lambdas as arguments to functions as callbacks or observers Video Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript . Example Source Example Source: https://gitlab.com/android-development-2022-refresh/kotlin-primer","title":"Kotlin Primer"},{"location":"week-02/2.1-Kotlin-primer/index.html#introduction","text":"Kotlin is a fantastic new language that we'll be using to create our Android Applications. In this module, we'll quickly explore the basics of the language from a Java perspective. During the rest of the course, I'll often explain some of these concepts in more detail.","title":"Introduction"},{"location":"week-02/2.1-Kotlin-primer/index.html#objectives","text":"Understand the basic structure of Kotlin classes, properties and functions Use lambdas as arguments to functions as callbacks or observers","title":"Objectives"},{"location":"week-02/2.1-Kotlin-primer/index.html#video","text":"Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript .","title":"Video"},{"location":"week-02/2.1-Kotlin-primer/index.html#example-source","text":"Example Source: https://gitlab.com/android-development-2022-refresh/kotlin-primer","title":"Example Source"},{"location":"week-02/2.2-Versions/index.html","text":"Introduction Android is an incredibly fast-moving platform, and designing applications that can run successfully on multiple versions of Android can be tricky. In this module, we'll talk about some concerns and techniques for creating backward-compatible applications. Objectives Know where to look to determine which versions of Android for which you want to retain compatibility See how version checks and compatibility libraries can assist with backward compatibility Video Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript .","title":"Versions"},{"location":"week-02/2.2-Versions/index.html#introduction","text":"Android is an incredibly fast-moving platform, and designing applications that can run successfully on multiple versions of Android can be tricky. In this module, we'll talk about some concerns and techniques for creating backward-compatible applications.","title":"Introduction"},{"location":"week-02/2.2-Versions/index.html#objectives","text":"Know where to look to determine which versions of Android for which you want to retain compatibility See how version checks and compatibility libraries can assist with backward compatibility","title":"Objectives"},{"location":"week-02/2.2-Versions/index.html#video","text":"Note You can change the quality and playback speed by clicking the icon when the video is playing. If you would like to search the captions for this video, click Watch on YouTube , press \"...\" and choose Show Transcript .","title":"Video"},{"location":"week-02/2.3-Architecture/index.html","text":"Before we start writing code, let's talk about how we should organize our application. Over the years there have been many best practices for organizing code. These practices evolve as technologies change and we learn from maintaining previous approaches. When we look at the application as a whole and consider all of its high-level parts, we're talking about the architecture of the application. The architecture describes the general division of responsibilities in your application, and which parts communicate with which other parts. Breaking your application into chunks allows for Easier discussion of how the application works Easier developer tasking (especially in larger applications) Reuse of chunks across different types of applications (reusing the data layer, for example, across mobile apps, web services, and command-line applications) Easier independent testing of separate parts of your application The architecture we use in this class is based on Modern Android Development , also known as \"MAD\". See https://developer.android.com/modern-android-development , which includes architecture, tools and libraries that Google recommends for Android development. Architecture Overview Applications are structured as Layers and Modules . A \"module\" is a separately-compilable group of code and resources that can be consumed by other modules in your system. They're useful for isolating functionality, internal implementation details can be hidden while exposing a subset of function, its public API (Application Programming Interface). Separating code into modules also helps large applications isolate changes that many developers are making at the same time. A \"layer\" is a grouping of one or more modules with certain responsibilities. Layers allow you to explicitly define communication between modules and further improve ease of maintenance. Application Layers graph TD UI[User-Interface Layer] -->|depends on| Domain Domain[Domain Layer] -->|depends on| Data[Data Layer] At a high level, we talk about application layers , separating data from its manipulation and presentation. Each layer isolates a responsibility in the application. At its simplest, each layer could be exactly one module. (While layers could be just conceptual grouping of code/resources that are all in a single module, using at least one module per layer gives us the ability to restrict what's exposed between layers.) Layers could contain multiple modules, which I recommend as the application grows in size. The Data Layer manages data acquisition and update. You can use it to persist data locally in a database, file or in memory. Or maybe your application connects to a server for its data; you can use the Data Layer to connect to a server to grab data and push changes. By keeping your data access code inside the Data Layer , you can abstract and hide the how data is accessed from the rest of the application. If your data management code changes over time, the rest of the application may require fewer changes to adapt. Operations in the Data Layer are sometimes called Primitive Operations , as they're the core, often simplest, operations you define on your data. Many primitive operations are simply property changes to objects and CRUD operations (Create/Read/Update/Delete) against your data store. You may also define more complex operations that are always needed for any user of the data. The Data Layer doesn't depend upon other architectural layers, but may depend upon other modules/libraries such as database storage or network communication. The Domain Layer is an optional layer that increases in value as the size of your application grows. Often you'll find that several parts of your application need to perform the same sequences of primitive operations. For example, a game might have several places that put an item in the player's inventory. It would be a great idea to create a function to contain the repeated code, but where do we put that function? In a smaller application, you could add a function in the User-Interface Layer , and you've successfully factored out that common functionality. As the application grows, the user interface might be broken down into multiple modules. Which UI module should host that functionality? Or if you want to use the same \"put item in inventory\" for an Android application, desktop application, and web application, you no longer have a common user interface to host it. A Domain Layer hosts this type of common functionality and gives you access from any user interface components, within the same application or across multiple applications. These types of operations are generally called \"macro operations\". They build upon primitive operations by combining primitives to create more complex processing of the data. In recent architectures, these types of operations are called Use Cases or Interactors . The Domain Layer only depends upon the architectural Data Layer for access to its data. It can also depend upon other modules/libraries that provide frameworks, algorithms or support functions to work with the data. Finally, we use our User-Interface Layer to present data to the user and interpret their actions. This layer can present the data using many different approaches: graphically, textually, as a service, or using assistive technologies for example. Note I've called out \"as a service\" as a type of User-Interface implementation. Think about what it means to be a \"user\". The \"outsider\" that's interacting with your application is its user. That could be a person, or it could be other applications. When we think of a service (such as a web service) as a \"user interface\", we're talking about a layer that prepares data for presentation (creating a JSON output, for example) and interprets user interaction (receives the service call, figures out what it means, and calls the appropriate functionality in the Domain (if present) or Data layers.) The User-Interface Layer only depends on the Domain Layer (if present) or the Data Layer . This is somewhat controversial; some want to allow the User-Interface Layer to use the Domain Layer for complex operations, and skip past it directly access the Data Layer for simpler operations. The problem here is that it's possible to miss added value in the Domain Layer with this approach. Suppose you have a Domain Layer that exposes macro operations to the User-Interface Layer , and also passes-through primitive operations from the Data Layer . If we allow the User-Interface Layer a choice of which layer it wants to work with, it may miss changes that the Domain Layer makes. For example, later on, as part of the simpler pass-throughs, if the Domain Layer adds some logging and verification (that the Data Layer doesn't have), it will be missed if the User-Interface Layer skipped around the Domain Layer to directly communicate with the Data Layer . When using a Domain Layer , all User-Interface Layer modules must only depend on modules in the Domain Layer . Data Layer Let's dive a little deeper into the Data Layer . The most basic part of the Data Layer is a Data Source . This is where you access your data. It could be a local or remote database, a web service, a file or another place to store your data. The data in this layer is usually persisted so it can be accessed across runs of the application. Sometimes your application may use more than one data source. For example, if your application managed contacts, they might be stored in a server for access across devices. To reduce the user's network use, you may also have a local database that stores any contacts that have been previously accessed. So how do you decide which data source to use? Add a repository module. A repository can act as a switch between data sources. If the repository is asked for a contact, it checks to see if it's in the local-database data source. If so, it just returns it; no network communication needed! If not, it grabs the contact from the network, stores it in the local database, then returns it. (We're ignoring data that's been changed on the server in this example, but there are other technologies that make that easy to manage.) flowchart LR other[User Interface/Domain Layer] --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) The repository can also perform another useful function - convert data that's used directly by a data source to data that can be returned to other layers. This conversion can limit which data is available to other layers (hiding data that you don't want to expose) add new data that's derived from a data source or pulled in from other sources change the accessibility of data, commonly making it immutable return objects that implement interfaces required by other layers One of the most important things we'll learn about our User-Interface Layer is that immutable data makes everything more reliable and can help frameworks like Jetpack Compose optimize what needs to be refreshed. Immutable data stops its users for directly modifying it; they must use other functions to make changes, functions that will then know that changes are being made. This allows for easy enforcement of Unidirectional Data Flow , which we'll talk about later. The repository copies the data from the actual data objects (often known as \"entities\") and creates Data Transfer Objects (DTOs) to carry that data. DTOs are often immutable , and can also restrict which data is visible or enhance the data with derived properties. DTOs may be a simple wrapper (an \"Adapter\" in design-pattern parlance), or an entirely-separate object that holds a copy of the data. Using a repository helps abstract the way the data is accessed outside the Data Layer . Depending on your level of abstraction, this may result in better isolation between the layers. Changes to how you store data become less likely to force changes outside the Data Layer . Note \"Less likely\" depends on the amount of abstraction used when exposing data from the data layer, and this is a tradeoff. Higher abstraction requires more types (interfaces and/or classes) to be defined and maintained and reduces required external changes. Lower abstraction (such as directly passing data that's managed by your database) is less to develop and maintain, but requires more to change outside the layer when data-later internals change. Think about how likely change is in your application. Is it likely you'll switch data sources? Is it likely the app will only be an Android application, or might you want to use parts of it in a desktop or web application? (Eventually, I think that Kotlin Multiplatform [KMP] will also allow easy reuse of much of your code on iOS as well.) Domain Layer The Domain Layer is optional, and we won't be using it in this class. It's overkill for small applications. As your applications grow, it becomes a much more useful. flowchart LR ui[User Interface Layer] ui --> uc1 ui --> uc2 ui --> uc3 ui --> data data --> repo uc1 --> repo uc2 --> repo uc3 --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Domain Layer direction LR data[Data] uc1[Use Case 1] uc2[Use Case 2] uc3[Use Case 3] end subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) The gist of this layer is that is exposes data from the Data Layer along with Use Cases for common data modifications. For more detail on the Domain Layer , please see https://developer.android.com/topic/architecture/domain-layer . You may also be interested in learning about \"Clean Architecture\", which explains the use of a Domain Layer . Be careful though - adding a Domain Layer can increase the complexity of a smaller app and make its maintenance burdensome - you'll have to find that line, and much of depends on how many developers will be working on the same application. If only a few, it's best to keep it simple. If many developers on a larger application, the extra separation and explicit use cases can be a great help. User-Interface Layer The User Interface Layer is likely where most of your changes will happen, and will usually involve much more detailed code. There are two major concepts in this layer: State - the data used to present the user interface User Interface - the means of allowing the user to consume and interact with the data State State includes data from other layers as well as data that's only used for controlling the user interface. If you have an application that's displaying contact information, the contact data comes from the other layers and is the \"what\" that you want to display. But you'll also need other information such as What screen is user seeing? Which position in a list is at the top? What field currently has focus? Some data only makes sense for a specific user interface. It's easiest to determine which data this is if you ask yourself \"would I need this data for a graphical user interface, a command-line interface, and a web service?\" If so, the data likely belongs in the Data Layer . Otherwise, the data only exists in the User-Interface Layer . Our goals in the User-Interface Layer are to Observe state changes Prepare our state for presentation to the user Interpret user interaction Update the state as needed (which will trigger our observers) We'll be using Jetpack Compose as our user interface in this class.Compose has great state-management support, often making the state observation invisible, but sometimes it can be tricky to set up. We'll work through several types of state use in this class, but be aware that best practices for state are still being developed and may change from what I present. Keep an eye on https://developer.android.com/ site and the https://android-developers.googleblog.com/ blog for emerging details. As part of the User-Interface Layer responsibilities, we need to prepare and update state. This function is usually managed by a View Model . View Models The concept of a View Model is simple - it's a place to manage state preparation and updates. Without Domain Layer With Domain Layer flowchart LR subgraph User Interface Layer ui[User Interface] --> vm[View Model] end vm --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end flowchart LR subgraph User Interface Layer ui[User Interface] --> vm[View Model] end vm --> uc1 vm --> uc2 vm --> uc3 vm --> data uc1 --> repo uc2 --> repo uc3 --> repo data --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Domain Layer direction LR data[Data] uc1[Use Case 1] uc2[Use Case 2] uc3[Use Case 3] end subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) Note You may have multiple view models. Some developers prefer one view model per screen, others prefer by types of data, and others prefer a single view model. The decision often depends on the size of the application as well. A view model creates state to be used by the user interface. In some cases, it may just pass the state along. In other cases, it may modify or combine state from underlying layers. View model functions allow the user interface to tell it what the user wants to do, such as adding/deleting a contact or switching to a different screen. These functions will interact with the Domain Layer (if present) or Data Layer to update the data. The view model needs to expose the state in a way that the user interface can observe it. Depending on the UI framework being used, the state might be exposed using the Observer pattern, using Android LiveData , Jetpack Compose State objects, Kotlin Flow s or other approaches. For our work, we'll be using Kotlin Flow s and Compose State s. We'll talk about what those are in later modules. Composable Functions For our user interfaces, we'll use Jetpack Compose to declare our user interface. In a nutshell, you'll create Composable functions in Kotlin. These functions will emit descriptions of parts of the user interface to a tree. The Compose UI framework will look at this tree and create a user interface. The cool thing is that Compose can watch the parameters passed to a Composable function. If the values change from one call to the next, it will recompose , emitting a replacement for the part of the tree that it previously emitted. The Compose UI will then detect changes and refresh only the parts of the UI that need to be refreshed. Data Objects Different types of data flow between different parts of the application. Your application may use Raw data - data obtained in its raw form from a database, file, service, etcetera. The data source formats it into an object to be passed back to the repository Entities - data obtained from data sources Data Transfer Objects (DTOs) - data abstracted/restricted before being passed out of the Data Layer State - data prepared for use in the user interface A typical flow of data might look like Without Domain Layer With Domain Layer flowchart RL subgraph User Interface Layer vm[View Model] -->|State| ui[User Interface] end repo -->|DTO| vm db[(Database)] -->|raw| ds subgraph Data Layer ds[Data Source] -->|Entity| repo[Repository] end flowchart RL subgraph User Interface Layer vm[View Model] -->|State| ui[User Interface] end Data data -->|DTO| vm repo -->|DTO| data db[(Database)] -->|raw| ds subgraph Domain Layer direction TB data[Data] uc[Use Case] end subgraph Data Layer ds[Data Source] -->|Entity| repo[Repository] end Events So how do we make changes? That's where events come in. The user interface receives user interactions, such as key and button presses, and interprets their meaning. It then calls Event functions to trigger state changes. When using Jetpack Compose , these event functions are typically Kotlin lambdas passed into the functions we use to create the user interface. Most of these lambdas will call functions in the view model; others may update some local state in the user interface itself. Without Domain Layer With Domain Layer flowchart LR subgraph User Interface Layer ui[User Interface] -->|\"event()\"| vm[View Model] end vm -->|\"update()\"| repo ds -->|query| db[(Database)] subgraph Data Layer repo[Repository] -->|\"update()\"| ds[Data Source] end flowchart LR subgraph User Interface Layer ui[User Interface] -->|\"event()\"| vm[View Model] end vm -->|\"update()\"| uc uc -->|\"update()\"| repo ds -->|query| db[(Database)] subgraph Domain Layer direction TB data[Data] uc[Use Case] end subgraph Data Layer repo[Repository] -->|\"update()\"| ds[Data Source] end We'll see how this works when we start coding our user interface. Concurrency User interfaces are typically updated via a single thread. That thread is responsible for drawing any needed changes and responding to user interactions. The UI should respond immediately to interactions such as pressing a button, scrolling the screen, or drawing pictures with their finger. Many user actions result in performing data updates, which can be expensive. If we perform these actions on the same thread that detected the user interaction, all screen updates are blocked until that update has completed. At best, this can result in \"jank\", an interface that doesn't immediately respond and jumps between drawn frames. At worst, an update might take long enough that the user interface freezes. The easiest fix for this is to run data updates on a different thread so the user interface can keep responding immediately. We'll do this using Kotlin Coroutines, but it could also be done using threads and executors. While the UI is now responsive, we can run into data synchronization, race and deadlock issues. Fortunately there are several patterns we can follow to more reliably work with concurrent processing. One of the most effective ways to help is to use a Unidirectional Data Flow , or UDF. Unidirectional Data Flow By passing data into functions, and receiving event calls out , we remove the possibility of data changing while it's being read. Jetpack Compose's Composable functions take parameters for data and events. For example, we might define a \"submit button\" function: @Composable fun Submit ( buttonText : String , onButtonPress : () -> Unit , ) { ... } Note The convention for Composable functions that emit ui nodes to the tree is that they are named using UpperCamelCase() . This feels a bit weird, but the idea is that we're treating these functions as declarations of what the ui looks like, not imperative code to build a UI. Declarations feel more like class or interface definitions, hence the case. The buttonText is data coming in; the Submit() function will emit a button to the tree that displays that text. Submit() will also attach a \"click listener\" to the button. When the button is pressed, it will call onButtonPress() to tell the caller of Submit() that the button was pressed. Data comes in; events go out. That's Unidirectional Data Flow . Somewhere up at the top of the call chain, a lambda is passed in to be used as that onButtonPress parameter, and it contains the code to perform the update. That lambda should immediately switch to a different thread to perform its work. We'll do this by launching a coroutine to perform the work. At the end of the coroutine, new data will be set for the state and passed in. For this example, if the new state contains the buttonText that's passed into SubmitButton() , the UI will be updated. We'll dig into this when we start talking about Jetpack Compose . For now, all you need to know is we'll be pushing data and event functions into the Composable functions, and call the event functions to indicate that something has changed.","title":"Architecture"},{"location":"week-02/2.3-Architecture/index.html#architecture-overview","text":"Applications are structured as Layers and Modules . A \"module\" is a separately-compilable group of code and resources that can be consumed by other modules in your system. They're useful for isolating functionality, internal implementation details can be hidden while exposing a subset of function, its public API (Application Programming Interface). Separating code into modules also helps large applications isolate changes that many developers are making at the same time. A \"layer\" is a grouping of one or more modules with certain responsibilities. Layers allow you to explicitly define communication between modules and further improve ease of maintenance. Application Layers graph TD UI[User-Interface Layer] -->|depends on| Domain Domain[Domain Layer] -->|depends on| Data[Data Layer] At a high level, we talk about application layers , separating data from its manipulation and presentation. Each layer isolates a responsibility in the application. At its simplest, each layer could be exactly one module. (While layers could be just conceptual grouping of code/resources that are all in a single module, using at least one module per layer gives us the ability to restrict what's exposed between layers.) Layers could contain multiple modules, which I recommend as the application grows in size. The Data Layer manages data acquisition and update. You can use it to persist data locally in a database, file or in memory. Or maybe your application connects to a server for its data; you can use the Data Layer to connect to a server to grab data and push changes. By keeping your data access code inside the Data Layer , you can abstract and hide the how data is accessed from the rest of the application. If your data management code changes over time, the rest of the application may require fewer changes to adapt. Operations in the Data Layer are sometimes called Primitive Operations , as they're the core, often simplest, operations you define on your data. Many primitive operations are simply property changes to objects and CRUD operations (Create/Read/Update/Delete) against your data store. You may also define more complex operations that are always needed for any user of the data. The Data Layer doesn't depend upon other architectural layers, but may depend upon other modules/libraries such as database storage or network communication. The Domain Layer is an optional layer that increases in value as the size of your application grows. Often you'll find that several parts of your application need to perform the same sequences of primitive operations. For example, a game might have several places that put an item in the player's inventory. It would be a great idea to create a function to contain the repeated code, but where do we put that function? In a smaller application, you could add a function in the User-Interface Layer , and you've successfully factored out that common functionality. As the application grows, the user interface might be broken down into multiple modules. Which UI module should host that functionality? Or if you want to use the same \"put item in inventory\" for an Android application, desktop application, and web application, you no longer have a common user interface to host it. A Domain Layer hosts this type of common functionality and gives you access from any user interface components, within the same application or across multiple applications. These types of operations are generally called \"macro operations\". They build upon primitive operations by combining primitives to create more complex processing of the data. In recent architectures, these types of operations are called Use Cases or Interactors . The Domain Layer only depends upon the architectural Data Layer for access to its data. It can also depend upon other modules/libraries that provide frameworks, algorithms or support functions to work with the data. Finally, we use our User-Interface Layer to present data to the user and interpret their actions. This layer can present the data using many different approaches: graphically, textually, as a service, or using assistive technologies for example. Note I've called out \"as a service\" as a type of User-Interface implementation. Think about what it means to be a \"user\". The \"outsider\" that's interacting with your application is its user. That could be a person, or it could be other applications. When we think of a service (such as a web service) as a \"user interface\", we're talking about a layer that prepares data for presentation (creating a JSON output, for example) and interprets user interaction (receives the service call, figures out what it means, and calls the appropriate functionality in the Domain (if present) or Data layers.) The User-Interface Layer only depends on the Domain Layer (if present) or the Data Layer . This is somewhat controversial; some want to allow the User-Interface Layer to use the Domain Layer for complex operations, and skip past it directly access the Data Layer for simpler operations. The problem here is that it's possible to miss added value in the Domain Layer with this approach. Suppose you have a Domain Layer that exposes macro operations to the User-Interface Layer , and also passes-through primitive operations from the Data Layer . If we allow the User-Interface Layer a choice of which layer it wants to work with, it may miss changes that the Domain Layer makes. For example, later on, as part of the simpler pass-throughs, if the Domain Layer adds some logging and verification (that the Data Layer doesn't have), it will be missed if the User-Interface Layer skipped around the Domain Layer to directly communicate with the Data Layer . When using a Domain Layer , all User-Interface Layer modules must only depend on modules in the Domain Layer .","title":"Architecture Overview"},{"location":"week-02/2.3-Architecture/index.html#data-layer","text":"Let's dive a little deeper into the Data Layer . The most basic part of the Data Layer is a Data Source . This is where you access your data. It could be a local or remote database, a web service, a file or another place to store your data. The data in this layer is usually persisted so it can be accessed across runs of the application. Sometimes your application may use more than one data source. For example, if your application managed contacts, they might be stored in a server for access across devices. To reduce the user's network use, you may also have a local database that stores any contacts that have been previously accessed. So how do you decide which data source to use? Add a repository module. A repository can act as a switch between data sources. If the repository is asked for a contact, it checks to see if it's in the local-database data source. If so, it just returns it; no network communication needed! If not, it grabs the contact from the network, stores it in the local database, then returns it. (We're ignoring data that's been changed on the server in this example, but there are other technologies that make that easy to manage.) flowchart LR other[User Interface/Domain Layer] --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) The repository can also perform another useful function - convert data that's used directly by a data source to data that can be returned to other layers. This conversion can limit which data is available to other layers (hiding data that you don't want to expose) add new data that's derived from a data source or pulled in from other sources change the accessibility of data, commonly making it immutable return objects that implement interfaces required by other layers One of the most important things we'll learn about our User-Interface Layer is that immutable data makes everything more reliable and can help frameworks like Jetpack Compose optimize what needs to be refreshed. Immutable data stops its users for directly modifying it; they must use other functions to make changes, functions that will then know that changes are being made. This allows for easy enforcement of Unidirectional Data Flow , which we'll talk about later. The repository copies the data from the actual data objects (often known as \"entities\") and creates Data Transfer Objects (DTOs) to carry that data. DTOs are often immutable , and can also restrict which data is visible or enhance the data with derived properties. DTOs may be a simple wrapper (an \"Adapter\" in design-pattern parlance), or an entirely-separate object that holds a copy of the data. Using a repository helps abstract the way the data is accessed outside the Data Layer . Depending on your level of abstraction, this may result in better isolation between the layers. Changes to how you store data become less likely to force changes outside the Data Layer . Note \"Less likely\" depends on the amount of abstraction used when exposing data from the data layer, and this is a tradeoff. Higher abstraction requires more types (interfaces and/or classes) to be defined and maintained and reduces required external changes. Lower abstraction (such as directly passing data that's managed by your database) is less to develop and maintain, but requires more to change outside the layer when data-later internals change. Think about how likely change is in your application. Is it likely you'll switch data sources? Is it likely the app will only be an Android application, or might you want to use parts of it in a desktop or web application? (Eventually, I think that Kotlin Multiplatform [KMP] will also allow easy reuse of much of your code on iOS as well.)","title":"Data Layer"},{"location":"week-02/2.3-Architecture/index.html#domain-layer","text":"The Domain Layer is optional, and we won't be using it in this class. It's overkill for small applications. As your applications grow, it becomes a much more useful. flowchart LR ui[User Interface Layer] ui --> uc1 ui --> uc2 ui --> uc3 ui --> data data --> repo uc1 --> repo uc2 --> repo uc3 --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Domain Layer direction LR data[Data] uc1[Use Case 1] uc2[Use Case 2] uc3[Use Case 3] end subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) The gist of this layer is that is exposes data from the Data Layer along with Use Cases for common data modifications. For more detail on the Domain Layer , please see https://developer.android.com/topic/architecture/domain-layer . You may also be interested in learning about \"Clean Architecture\", which explains the use of a Domain Layer . Be careful though - adding a Domain Layer can increase the complexity of a smaller app and make its maintenance burdensome - you'll have to find that line, and much of depends on how many developers will be working on the same application. If only a few, it's best to keep it simple. If many developers on a larger application, the extra separation and explicit use cases can be a great help.","title":"Domain Layer"},{"location":"week-02/2.3-Architecture/index.html#user-interface-layer","text":"The User Interface Layer is likely where most of your changes will happen, and will usually involve much more detailed code. There are two major concepts in this layer: State - the data used to present the user interface User Interface - the means of allowing the user to consume and interact with the data","title":"User-Interface Layer"},{"location":"week-02/2.3-Architecture/index.html#state","text":"State includes data from other layers as well as data that's only used for controlling the user interface. If you have an application that's displaying contact information, the contact data comes from the other layers and is the \"what\" that you want to display. But you'll also need other information such as What screen is user seeing? Which position in a list is at the top? What field currently has focus? Some data only makes sense for a specific user interface. It's easiest to determine which data this is if you ask yourself \"would I need this data for a graphical user interface, a command-line interface, and a web service?\" If so, the data likely belongs in the Data Layer . Otherwise, the data only exists in the User-Interface Layer . Our goals in the User-Interface Layer are to Observe state changes Prepare our state for presentation to the user Interpret user interaction Update the state as needed (which will trigger our observers) We'll be using Jetpack Compose as our user interface in this class.Compose has great state-management support, often making the state observation invisible, but sometimes it can be tricky to set up. We'll work through several types of state use in this class, but be aware that best practices for state are still being developed and may change from what I present. Keep an eye on https://developer.android.com/ site and the https://android-developers.googleblog.com/ blog for emerging details. As part of the User-Interface Layer responsibilities, we need to prepare and update state. This function is usually managed by a View Model .","title":"State"},{"location":"week-02/2.3-Architecture/index.html#view-models","text":"The concept of a View Model is simple - it's a place to manage state preparation and updates. Without Domain Layer With Domain Layer flowchart LR subgraph User Interface Layer ui[User Interface] --> vm[View Model] end vm --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end flowchart LR subgraph User Interface Layer ui[User Interface] --> vm[View Model] end vm --> uc1 vm --> uc2 vm --> uc3 vm --> data uc1 --> repo uc2 --> repo uc3 --> repo data --> repo ds1 --> db[(Database)] ds2 --> file(((File))) ds3 --> ws(((Web Service))) subgraph Domain Layer direction LR data[Data] uc1[Use Case 1] uc2[Use Case 2] uc3[Use Case 3] end subgraph Data Layer direction LR repo[Repository] --> ds1[Data Source 1] repo[Repository] --> ds2[Data Source 2] repo[Repository] --> ds3[Data Source 3] end (Arrows represent dependencies) Note You may have multiple view models. Some developers prefer one view model per screen, others prefer by types of data, and others prefer a single view model. The decision often depends on the size of the application as well. A view model creates state to be used by the user interface. In some cases, it may just pass the state along. In other cases, it may modify or combine state from underlying layers. View model functions allow the user interface to tell it what the user wants to do, such as adding/deleting a contact or switching to a different screen. These functions will interact with the Domain Layer (if present) or Data Layer to update the data. The view model needs to expose the state in a way that the user interface can observe it. Depending on the UI framework being used, the state might be exposed using the Observer pattern, using Android LiveData , Jetpack Compose State objects, Kotlin Flow s or other approaches. For our work, we'll be using Kotlin Flow s and Compose State s. We'll talk about what those are in later modules.","title":"View Models"},{"location":"week-02/2.3-Architecture/index.html#composable-functions","text":"For our user interfaces, we'll use Jetpack Compose to declare our user interface. In a nutshell, you'll create Composable functions in Kotlin. These functions will emit descriptions of parts of the user interface to a tree. The Compose UI framework will look at this tree and create a user interface. The cool thing is that Compose can watch the parameters passed to a Composable function. If the values change from one call to the next, it will recompose , emitting a replacement for the part of the tree that it previously emitted. The Compose UI will then detect changes and refresh only the parts of the UI that need to be refreshed.","title":"Composable Functions"},{"location":"week-02/2.3-Architecture/index.html#data-objects","text":"Different types of data flow between different parts of the application. Your application may use Raw data - data obtained in its raw form from a database, file, service, etcetera. The data source formats it into an object to be passed back to the repository Entities - data obtained from data sources Data Transfer Objects (DTOs) - data abstracted/restricted before being passed out of the Data Layer State - data prepared for use in the user interface A typical flow of data might look like Without Domain Layer With Domain Layer flowchart RL subgraph User Interface Layer vm[View Model] -->|State| ui[User Interface] end repo -->|DTO| vm db[(Database)] -->|raw| ds subgraph Data Layer ds[Data Source] -->|Entity| repo[Repository] end flowchart RL subgraph User Interface Layer vm[View Model] -->|State| ui[User Interface] end Data data -->|DTO| vm repo -->|DTO| data db[(Database)] -->|raw| ds subgraph Domain Layer direction TB data[Data] uc[Use Case] end subgraph Data Layer ds[Data Source] -->|Entity| repo[Repository] end","title":"Data Objects"},{"location":"week-02/2.3-Architecture/index.html#events","text":"So how do we make changes? That's where events come in. The user interface receives user interactions, such as key and button presses, and interprets their meaning. It then calls Event functions to trigger state changes. When using Jetpack Compose , these event functions are typically Kotlin lambdas passed into the functions we use to create the user interface. Most of these lambdas will call functions in the view model; others may update some local state in the user interface itself. Without Domain Layer With Domain Layer flowchart LR subgraph User Interface Layer ui[User Interface] -->|\"event()\"| vm[View Model] end vm -->|\"update()\"| repo ds -->|query| db[(Database)] subgraph Data Layer repo[Repository] -->|\"update()\"| ds[Data Source] end flowchart LR subgraph User Interface Layer ui[User Interface] -->|\"event()\"| vm[View Model] end vm -->|\"update()\"| uc uc -->|\"update()\"| repo ds -->|query| db[(Database)] subgraph Domain Layer direction TB data[Data] uc[Use Case] end subgraph Data Layer repo[Repository] -->|\"update()\"| ds[Data Source] end We'll see how this works when we start coding our user interface.","title":"Events"},{"location":"week-02/2.3-Architecture/index.html#concurrency","text":"User interfaces are typically updated via a single thread. That thread is responsible for drawing any needed changes and responding to user interactions. The UI should respond immediately to interactions such as pressing a button, scrolling the screen, or drawing pictures with their finger. Many user actions result in performing data updates, which can be expensive. If we perform these actions on the same thread that detected the user interaction, all screen updates are blocked until that update has completed. At best, this can result in \"jank\", an interface that doesn't immediately respond and jumps between drawn frames. At worst, an update might take long enough that the user interface freezes. The easiest fix for this is to run data updates on a different thread so the user interface can keep responding immediately. We'll do this using Kotlin Coroutines, but it could also be done using threads and executors. While the UI is now responsive, we can run into data synchronization, race and deadlock issues. Fortunately there are several patterns we can follow to more reliably work with concurrent processing. One of the most effective ways to help is to use a Unidirectional Data Flow , or UDF.","title":"Concurrency"},{"location":"week-02/2.3-Architecture/index.html#unidirectional-data-flow","text":"By passing data into functions, and receiving event calls out , we remove the possibility of data changing while it's being read. Jetpack Compose's Composable functions take parameters for data and events. For example, we might define a \"submit button\" function: @Composable fun Submit ( buttonText : String , onButtonPress : () -> Unit , ) { ... } Note The convention for Composable functions that emit ui nodes to the tree is that they are named using UpperCamelCase() . This feels a bit weird, but the idea is that we're treating these functions as declarations of what the ui looks like, not imperative code to build a UI. Declarations feel more like class or interface definitions, hence the case. The buttonText is data coming in; the Submit() function will emit a button to the tree that displays that text. Submit() will also attach a \"click listener\" to the button. When the button is pressed, it will call onButtonPress() to tell the caller of Submit() that the button was pressed. Data comes in; events go out. That's Unidirectional Data Flow . Somewhere up at the top of the call chain, a lambda is passed in to be used as that onButtonPress parameter, and it contains the code to perform the update. That lambda should immediately switch to a different thread to perform its work. We'll do this by launching a coroutine to perform the work. At the end of the coroutine, new data will be set for the state and passed in. For this example, if the new state contains the buttonText that's passed into SubmitButton() , the UI will be updated. We'll dig into this when we start talking about Jetpack Compose . For now, all you need to know is we'll be pushing data and event functions into the Composable functions, and call the event functions to indicate that something has changed.","title":"Unidirectional Data Flow"},{"location":"week-03/3.1-Room/index.html","text":"Each \"thing\" that you want to represent in your database is called an \"Entity\". Each entity has attributes, the data that describes it. In a Relational Database , each entity is represented by one row in a database table. The attributes are held in columns of the table. For these examples, we'll define \"Person\", \"Birth Certificate\", \"Organ\" and \"Address\" entities with the following attributes. In the \"Key\" column, you'll see three possible values: (blank) the attribute is not a key PK - represents a Primary Key, a value that must be unique in the table storing the entity. This is typically a unique identifier for an entity. FK - represents a Foreign Key, a primary key in some other table that we're associated with. In this example, I'm representing primary keys using Strings. I chose Strings here because mobile applications may synchronize their data between mobile devices and servers (or even other mobile devices). If entities can be created on mobile devices, possibly while not connected to a server, we can use a UUID ( Universally Unique Identifier ) to ensure we don't have collisions between ids created on different mobile devices at the same time. We'll see examples of this later. Person Attribute Type Key Comment id String PK Unique identifier name String name of the person ssn String social security number Organ Attribute Type Key Comment id String PK Unique identifier personId String FK id of owning person type String type of organ Birth Certificate Attribute Type Key Comment id String PK Unique identifier personId String FK id of owning person timeOfBirth long birth time in millis Address Attribute Type Key Comment id String PK Unique identifier street String city String state String zip String","title":"Entities"},{"location":"week-03/3.1-Room/index.html#person","text":"Attribute Type Key Comment id String PK Unique identifier name String name of the person ssn String social security number","title":"Person"},{"location":"week-03/3.1-Room/index.html#organ","text":"Attribute Type Key Comment id String PK Unique identifier personId String FK id of owning person type String type of organ","title":"Organ"},{"location":"week-03/3.1-Room/index.html#birth-certificate","text":"Attribute Type Key Comment id String PK Unique identifier personId String FK id of owning person timeOfBirth long birth time in millis","title":"Birth Certificate"},{"location":"week-03/3.1-Room/index.html#address","text":"Attribute Type Key Comment id String PK Unique identifier street String city String state String zip String","title":"Address"},{"location":"week-03/3.1-Room/STEP_10_FULL.html","text":"Entities can be related to other entities in the same or other tables. These relationships ca be One-to-one: One instance of an entity relates to exactly one instance other entity One-to-many: One instance of entity relates to multiple instances of another entity Many-to-Many: Multiple instances of an entity can be related to multiple instances of another entity These relationships are easiest to understand through examples One to One In our database, each Person can have exactly one Birth Certificate. Each Birth Certificate is owned by exactly one person. erDiagram PERSON ||--|| BIRTH-CERTIFICATE : born This relationship is often used for extra/optional data. While we could add the birth certificate details directly to the person, putting it in a separate entity allows that data to be optional, or easily moved to a different entity. Using one-to-one relationships, we can gradually attach more data to an entity as our system grows with new function. There are several ways to represent this, but we typically define an attribute in one of the entities that holds the id of the other entity. This attribute is called a Foreign Key, as it's a key in another entity. Usually you'll put this attribute in the entity that feels like it's \"owned\" by the other entity (if the relationship feels like that). In this example, the Person owns the Birth Certificate, so we put a Foreign Key called personId in the Birth Certificate. One to Many Often we'll need to have more than one entity attached/owned by an entity. In our example, a Person has organs, and those organs are only associated with that specific person. erDiagram PERSON ||--|{ ORGAN : has-organ By making Organ a separate entity, we can attach any number of Organs to a Person by defining a personId foreign key in the Organ entity. We can even donate organs to another Person entity by just changing the value of that foreign key. The donate organ can only belong to one Person at a time. Many to Many The real fun begins when entities can be shared. Think about an address as representing a home, office, hotel room, and so on. Each Person entity could be associated with multiple Address entities. Each Address entity could be associated with multiple Person entities. erDiagram PERSON }o--o{ ADDRESS : has-address This relationship is trickier to represent - we cannot simply add a foreign key to either entity; we need to create a table to represent the linkage. We can create an Person-Address table to relate each person/address pair Attribute Type Key Comment personId String FK The ID of the related person addressId String FK The ID of the related address In this case, the combination of the personId and addressId create a unique key for a row in the Person-Address table. Associative Entities Sometimes, a many-to-many relationship requires additional information describing the relationship itself. When we defined that Person-Address table above to represent the many-to-many relationship, we can add more columns to it for that extra information. Because we now have data we care about attached to the relationship, we now think of that Person-Address as an entity, and can link the three entities: erDiagram PERSON ||--o{ PERSON-ADDRESS : has-address PERSON-ADDRESS }o--|| ADDRESS: has-address The many-to-many relationship now looks like two one-to-many relationships: One Person can have zero or more Person-Addresses One Address can have zero or more Person-Addresses One Person-Address can have exactly one Person and one Address The Person-Address Entity now looks like Attribute Type Key Comment personId String FK The ID of the related person addressId String FK The ID of the related address type String The type of address (home, work...) Full Example We can put them all together in a single diagram erDiagram PERSON ||--|| BIRTH-CERTIFICATE : born PERSON ||--|{ ORGAN : has-organ PERSON }o--|| PERSON-ADDRESS : has-address PERSON-ADDRESS ||--|{ ADDRESS: has-address","title":"Relationships"},{"location":"week-03/3.1-Room/STEP_10_FULL.html#one-to-one","text":"In our database, each Person can have exactly one Birth Certificate. Each Birth Certificate is owned by exactly one person. erDiagram PERSON ||--|| BIRTH-CERTIFICATE : born This relationship is often used for extra/optional data. While we could add the birth certificate details directly to the person, putting it in a separate entity allows that data to be optional, or easily moved to a different entity. Using one-to-one relationships, we can gradually attach more data to an entity as our system grows with new function. There are several ways to represent this, but we typically define an attribute in one of the entities that holds the id of the other entity. This attribute is called a Foreign Key, as it's a key in another entity. Usually you'll put this attribute in the entity that feels like it's \"owned\" by the other entity (if the relationship feels like that). In this example, the Person owns the Birth Certificate, so we put a Foreign Key called personId in the Birth Certificate.","title":"One to One"},{"location":"week-03/3.1-Room/STEP_10_FULL.html#one-to-many","text":"Often we'll need to have more than one entity attached/owned by an entity. In our example, a Person has organs, and those organs are only associated with that specific person. erDiagram PERSON ||--|{ ORGAN : has-organ By making Organ a separate entity, we can attach any number of Organs to a Person by defining a personId foreign key in the Organ entity. We can even donate organs to another Person entity by just changing the value of that foreign key. The donate organ can only belong to one Person at a time.","title":"One to Many"},{"location":"week-03/3.1-Room/STEP_10_FULL.html#many-to-many","text":"The real fun begins when entities can be shared. Think about an address as representing a home, office, hotel room, and so on. Each Person entity could be associated with multiple Address entities. Each Address entity could be associated with multiple Person entities. erDiagram PERSON }o--o{ ADDRESS : has-address This relationship is trickier to represent - we cannot simply add a foreign key to either entity; we need to create a table to represent the linkage. We can create an Person-Address table to relate each person/address pair Attribute Type Key Comment personId String FK The ID of the related person addressId String FK The ID of the related address In this case, the combination of the personId and addressId create a unique key for a row in the Person-Address table.","title":"Many to Many"},{"location":"week-03/3.1-Room/STEP_10_FULL.html#associative-entities","text":"Sometimes, a many-to-many relationship requires additional information describing the relationship itself. When we defined that Person-Address table above to represent the many-to-many relationship, we can add more columns to it for that extra information. Because we now have data we care about attached to the relationship, we now think of that Person-Address as an entity, and can link the three entities: erDiagram PERSON ||--o{ PERSON-ADDRESS : has-address PERSON-ADDRESS }o--|| ADDRESS: has-address The many-to-many relationship now looks like two one-to-many relationships: One Person can have zero or more Person-Addresses One Address can have zero or more Person-Addresses One Person-Address can have exactly one Person and one Address The Person-Address Entity now looks like Attribute Type Key Comment personId String FK The ID of the related person addressId String FK The ID of the related address type String The type of address (home, work...)","title":"Associative Entities"},{"location":"week-03/3.1-Room/STEP_10_FULL.html#full-example","text":"We can put them all together in a single diagram erDiagram PERSON ||--|| BIRTH-CERTIFICATE : born PERSON ||--|{ ORGAN : has-organ PERSON }o--|| PERSON-ADDRESS : has-address PERSON-ADDRESS ||--|{ ADDRESS: has-address","title":"Full Example"},{"location":"week-03/3.1-Room/STEP_20_FULL.html","text":"Room is a simple Object-Relational-Mapping (aka ORM ) framework for Android. ORM s allow you to treat database tables as types in your programming language. Some require external definitions of your database and types. Others create databases and the access code by examining your types, which may include extra metadata such as annotations. Room takes the annotated-type approach. You define Entity classes Data-Access-Object interfaces (or abstract classes) Database abstract class and Room can generate the database, tables, and code to access them. When we walk through our movie example, we'll see how to set up the Room compiler as part of our build to process the annotated types and generate code. Note We're just going to show code snippets here; the setup needed for Room, as well as full example code, appears in the Movie Database Example. Entity Let's start by defining a simple entity using Room. @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) We're using a Kotlin Data Class to define the entity type. The @Entity annotation tells the Room compiler to generate a database table and code to convert the class definition to/from a row in that table. The @PrimaryKey annotation tells the Room compiler which attribute represents the unique identifier for the entity. Here we see a Kotlin default value specification - if a caller creates a Person instance and does not specify the id, one will be created for them by generating a random UUID . When you want to create a Person , all you need to do is write val person = Person ( name = \"Scott\" , age = 55 , ssn = \"123-45-6789\" ) You can then use a Data Access Object to store that Person in the database. By default the table name will be the class name, and all columns will be the property names. You can modify this, but we won't go into that detail in this class. If you want more detail, take a look at https://developer.android.com/training/data-storage/room . Data Access Object (DAO) A Data Access Object defines your \"CRUD\" functions. \"CRUD\" stands for \"Create, Read, Update and Delete\", the four types of queries you'll use to access and modify database contents. A simple DAO might look like @Dao interface PersonDao { @Query ( \"SELECT * FROM Person\" ) fun getPeople (): List < Person > @Query ( \"SELECT * FROM Person WHERE id = :id\" ) fun getPerson ( id : String ): Person @Insert fun insert ( vararg people : Person ) @Update fun update ( vararg people : Person ) @Delete fun delete ( vararg people : Person ) @Query ( \"DELETE FROM Person WHERE id IN (:ids)\" ) fun delete ( ids : List < String > ) } Note This is an interface, but you can also define it as an abstract class. The Room compiler will generate an implementation (or subclass) with the details of how to perform the declared functions. Here we're defining some simple CRUD operations for a Person. getPeople() - Returns a list of all Person instances in the table. Note that the specified SQL is just normal SQL, using the entity as the table name. getPerson(id) - Returns a single person with the specified id. The :id syntax is replaced with the id parameter passed to the function. insert(people) - inserts the passed Person instances into the database. By default, this will throw an exception if a passed Person has an id that's already in the table. update(people) - updates the Person table with the values for each passed Person . Will throw an exception if any passed Person doesn't exist. delete(people) - deletes the specified people from the table. delete(ids) - deletes the people with the specified ids from the table. Note that we're using the @Query annotation here to tailor the deletion. Once you have a DAO instance, you just call the functions to access/modify data. Note All of the functions defined in this DAO are synchronous ! You really don't want to call these from the user-interface thread or the UI may become \"janky\" (non-smooth animation, delays in user interaction, etc). Using the above DAO requires you to call the DAO functions from a different thread. We'll see how to do that shortly. We'll also see how to set up asynchronous queries in the DAO. Note You can define separate DAOs for separate entities, but you don't need to. If you don't have a huge number of DAO functions needed for your application, you can define them all in the same DAO interface/abstract class. Database But how do we get an instance of a DAO? That's where the Database class comes in. @Database ( version = 1 , entities = [ Person :: class ], exportSchema = false ) abstract class PersonDatabase : RoomDatabase () { abstract val dao : PersonDao } You define a database class with the @Database annotation, and the class must be abstract and extend RoomDatabase . The Room compiler will generate a subclass that creates the actual DAO instance you'll use to run your queries. By listing the entity classes in the @Database annotation, Room knows which tables it should create. Room also supports database migration (when the entity definitions change), but that's a more advanced topic and not covered in this class.) Usage Now that all the pieces are defined, we can use the database as follows. Note You'd normally put this code in a View Model or Repository class, spread across multiple functions. val database = Room . databaseBuilder ( context , // An Android context, like an Activity, used // to locate the database file on the device PersonDatabase :: class . java , // The database type to create \"PEOPLE\" // The name of the database file ) . build () val person1 = Person ( name = \"Scott\" , age = 55 , ssn = \"123-45-6789\" ) val person2 = Person ( name = \"Mikey\" , age = 10 , ssn = \"234-56-7890\" ) database . dao . insert ( person1 , person2 ) val people = database . dao . getPeople () person1 . age ++ database . dao . update ( person1 ) database . dao . delete ( person2 ) Room.databaseBuilder creates our database for us. Be sure to use only one instance of your database! The database has caching and other code that won't work as expected if you create multiple instances! Because of this, you usually want to hold onto your database in a View Model or Repository, or create the instance using Dependency Injection. Room.databaseBuilder is written in Java, and because of this, you cannot use named parameters or pass the Kotlin KClass ( PersonDatabase::class ) as a parameter. You must pass the Java Class that represents the database by adding .class . The Class is metadata describing the type, and is using to create an instance of the type dynamically at runtime. Once you have a database, you can access the dao and calls its functions. Threading Issues The problem with the code you've seen so far is that it might be invoked on the user interface thread, causing \"jank\", a poor-performing UI. It's important to perform the database processing on another thread. In this class, we'll use Kotlin's coroutines to perform our work. For data-access queries, we'll use Flows , collected in a coroutine. For everything else we'll launch a coroutine to perform the action. I'm going to do a lot of hand-waving on coroutines at this point (imagine you're watching a video with my hands flailing about) and explain them in more detail later in the course. For now, follow the patterns I'll describe and don't worry too much about how things work behind the scenes. For now, think of a coroutine as a helper that will run some code on a specific thread, and can switch to other threads depending on the work you need to run. Coroutines use Dispatchers to manage their execution on different threads. The \"Main\" dispatcher runs code on the user-interface thread. The \"IO\" dispatcher runs potentially blocking code on a set of threads optimized for blocking function calls. The \"Default\" dispatcher runs code on other background threads. Let's say that we want to display a message, fetch 10 items from the database, updating a progress bar and the message for each, then display a \"done\" message. For this type of processing, we need to update the message and progress bar on the UI thread, and fetch the items from the database on a background thread. Our coroutine might look like fun doStuff () { scope . launch ( Dispatchers . Main ) { showMessage ( \"Fetching data...\" ) repeat ( 10 ) { n -> val item = withContext ( Dispatchers . IO ) { fetch ( n ) } showMessage ( item . message ) updateProgress ( n ) } showMessage ( \"All data fetched!\" ) } } Notice how this is just a function, and it looks like normal imperative logic. But it's actually switching threads! And we don't need to set up callbacks or other constructs to pass values around or trigger thread changes. The withContext(...) function switches over to the IO dispatcher to run our background work, then returns back to the Main (UI) dispatcher to update the UI. Note The code we'll write will be even simpler, as we'll be updating state for our UI rather than switching over the UI thread to update the UI directly. Using Flows Kotlin Flows allow your coroutine to fetch new data as it becomes available. We can tweak our DAO data-access functions to return Flows rather than just data: @Query ( \"SELECT * FROM Person\" ) fun getPeople (): Flow < List < Person >> @Query ( \"SELECT * FROM Person WHERE id = :id\" ) fun getPerson ( id : String ): Flow < Person > So what does this do? We can now call getPeople() or getPerson() and it will immediately return a Flow . We collect it from a coroutine val people = database . dao . getPeople () // returns the Flow immediately scope . launch { // watch the Flow for new lists when data changes people . collect { people -> // display the current list of people } } The coroutine will ask for the next list of people to process, and suspend until a new list is available. (We'll talk more about \"suspension\" later, but in a nutshell, it allows the dispatcher to process other coroutines rather than blocking to wait for the next result to come in.) On the database side, a trigger is installed to serve up a new list when the data changes. The collect will keep receiving new lists until we cancel the coroutine (when its host scope is canceled - could be when the application or current activity is closed). One-Shot DAO Functions But what if we just want to run a DAO function and not receive updates? Or what if the function is an insert/update/delete? We want to call these functions and wait for the result . This call needs to be on a non-UI thread. In our examples, we again use Kotlin coroutines. For example, let's call an update function in the DAO: scope . launch { database . dao . update ( person1 ) } Here we kick off a coroutine to perform some work and call the update function. But what thread does this run on? That depends on the scope used to launch the coroutine, and would be a decision for the caller to make. We could do scope . launch ( Dispatchers . IO ) { database . dao . update ( person1 ) } but this has a few problems. First, as mentioned, the caller has to choose the dispatcher. When you leave things to the caller reading the documentation that says \"make sure you run this off the UI thread\", some calls are going to miss it. Second, Room cannot optimize the way that the database is accessed, because it doesn't know we're running the function in a coroutine. So let's tell Room.","title":"Room Basics"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#entity","text":"Let's start by defining a simple entity using Room. @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) We're using a Kotlin Data Class to define the entity type. The @Entity annotation tells the Room compiler to generate a database table and code to convert the class definition to/from a row in that table. The @PrimaryKey annotation tells the Room compiler which attribute represents the unique identifier for the entity. Here we see a Kotlin default value specification - if a caller creates a Person instance and does not specify the id, one will be created for them by generating a random UUID . When you want to create a Person , all you need to do is write val person = Person ( name = \"Scott\" , age = 55 , ssn = \"123-45-6789\" ) You can then use a Data Access Object to store that Person in the database. By default the table name will be the class name, and all columns will be the property names. You can modify this, but we won't go into that detail in this class. If you want more detail, take a look at https://developer.android.com/training/data-storage/room .","title":"Entity"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#data-access-object-dao","text":"A Data Access Object defines your \"CRUD\" functions. \"CRUD\" stands for \"Create, Read, Update and Delete\", the four types of queries you'll use to access and modify database contents. A simple DAO might look like @Dao interface PersonDao { @Query ( \"SELECT * FROM Person\" ) fun getPeople (): List < Person > @Query ( \"SELECT * FROM Person WHERE id = :id\" ) fun getPerson ( id : String ): Person @Insert fun insert ( vararg people : Person ) @Update fun update ( vararg people : Person ) @Delete fun delete ( vararg people : Person ) @Query ( \"DELETE FROM Person WHERE id IN (:ids)\" ) fun delete ( ids : List < String > ) } Note This is an interface, but you can also define it as an abstract class. The Room compiler will generate an implementation (or subclass) with the details of how to perform the declared functions. Here we're defining some simple CRUD operations for a Person. getPeople() - Returns a list of all Person instances in the table. Note that the specified SQL is just normal SQL, using the entity as the table name. getPerson(id) - Returns a single person with the specified id. The :id syntax is replaced with the id parameter passed to the function. insert(people) - inserts the passed Person instances into the database. By default, this will throw an exception if a passed Person has an id that's already in the table. update(people) - updates the Person table with the values for each passed Person . Will throw an exception if any passed Person doesn't exist. delete(people) - deletes the specified people from the table. delete(ids) - deletes the people with the specified ids from the table. Note that we're using the @Query annotation here to tailor the deletion. Once you have a DAO instance, you just call the functions to access/modify data. Note All of the functions defined in this DAO are synchronous ! You really don't want to call these from the user-interface thread or the UI may become \"janky\" (non-smooth animation, delays in user interaction, etc). Using the above DAO requires you to call the DAO functions from a different thread. We'll see how to do that shortly. We'll also see how to set up asynchronous queries in the DAO. Note You can define separate DAOs for separate entities, but you don't need to. If you don't have a huge number of DAO functions needed for your application, you can define them all in the same DAO interface/abstract class.","title":"Data Access Object (DAO)"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#database","text":"But how do we get an instance of a DAO? That's where the Database class comes in. @Database ( version = 1 , entities = [ Person :: class ], exportSchema = false ) abstract class PersonDatabase : RoomDatabase () { abstract val dao : PersonDao } You define a database class with the @Database annotation, and the class must be abstract and extend RoomDatabase . The Room compiler will generate a subclass that creates the actual DAO instance you'll use to run your queries. By listing the entity classes in the @Database annotation, Room knows which tables it should create. Room also supports database migration (when the entity definitions change), but that's a more advanced topic and not covered in this class.)","title":"Database"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#usage","text":"Now that all the pieces are defined, we can use the database as follows. Note You'd normally put this code in a View Model or Repository class, spread across multiple functions. val database = Room . databaseBuilder ( context , // An Android context, like an Activity, used // to locate the database file on the device PersonDatabase :: class . java , // The database type to create \"PEOPLE\" // The name of the database file ) . build () val person1 = Person ( name = \"Scott\" , age = 55 , ssn = \"123-45-6789\" ) val person2 = Person ( name = \"Mikey\" , age = 10 , ssn = \"234-56-7890\" ) database . dao . insert ( person1 , person2 ) val people = database . dao . getPeople () person1 . age ++ database . dao . update ( person1 ) database . dao . delete ( person2 ) Room.databaseBuilder creates our database for us. Be sure to use only one instance of your database! The database has caching and other code that won't work as expected if you create multiple instances! Because of this, you usually want to hold onto your database in a View Model or Repository, or create the instance using Dependency Injection. Room.databaseBuilder is written in Java, and because of this, you cannot use named parameters or pass the Kotlin KClass ( PersonDatabase::class ) as a parameter. You must pass the Java Class that represents the database by adding .class . The Class is metadata describing the type, and is using to create an instance of the type dynamically at runtime. Once you have a database, you can access the dao and calls its functions.","title":"Usage"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#threading-issues","text":"The problem with the code you've seen so far is that it might be invoked on the user interface thread, causing \"jank\", a poor-performing UI. It's important to perform the database processing on another thread. In this class, we'll use Kotlin's coroutines to perform our work. For data-access queries, we'll use Flows , collected in a coroutine. For everything else we'll launch a coroutine to perform the action. I'm going to do a lot of hand-waving on coroutines at this point (imagine you're watching a video with my hands flailing about) and explain them in more detail later in the course. For now, follow the patterns I'll describe and don't worry too much about how things work behind the scenes. For now, think of a coroutine as a helper that will run some code on a specific thread, and can switch to other threads depending on the work you need to run. Coroutines use Dispatchers to manage their execution on different threads. The \"Main\" dispatcher runs code on the user-interface thread. The \"IO\" dispatcher runs potentially blocking code on a set of threads optimized for blocking function calls. The \"Default\" dispatcher runs code on other background threads. Let's say that we want to display a message, fetch 10 items from the database, updating a progress bar and the message for each, then display a \"done\" message. For this type of processing, we need to update the message and progress bar on the UI thread, and fetch the items from the database on a background thread. Our coroutine might look like fun doStuff () { scope . launch ( Dispatchers . Main ) { showMessage ( \"Fetching data...\" ) repeat ( 10 ) { n -> val item = withContext ( Dispatchers . IO ) { fetch ( n ) } showMessage ( item . message ) updateProgress ( n ) } showMessage ( \"All data fetched!\" ) } } Notice how this is just a function, and it looks like normal imperative logic. But it's actually switching threads! And we don't need to set up callbacks or other constructs to pass values around or trigger thread changes. The withContext(...) function switches over to the IO dispatcher to run our background work, then returns back to the Main (UI) dispatcher to update the UI. Note The code we'll write will be even simpler, as we'll be updating state for our UI rather than switching over the UI thread to update the UI directly.","title":"Threading Issues"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#using-flows","text":"Kotlin Flows allow your coroutine to fetch new data as it becomes available. We can tweak our DAO data-access functions to return Flows rather than just data: @Query ( \"SELECT * FROM Person\" ) fun getPeople (): Flow < List < Person >> @Query ( \"SELECT * FROM Person WHERE id = :id\" ) fun getPerson ( id : String ): Flow < Person > So what does this do? We can now call getPeople() or getPerson() and it will immediately return a Flow . We collect it from a coroutine val people = database . dao . getPeople () // returns the Flow immediately scope . launch { // watch the Flow for new lists when data changes people . collect { people -> // display the current list of people } } The coroutine will ask for the next list of people to process, and suspend until a new list is available. (We'll talk more about \"suspension\" later, but in a nutshell, it allows the dispatcher to process other coroutines rather than blocking to wait for the next result to come in.) On the database side, a trigger is installed to serve up a new list when the data changes. The collect will keep receiving new lists until we cancel the coroutine (when its host scope is canceled - could be when the application or current activity is closed).","title":"Using Flows"},{"location":"week-03/3.1-Room/STEP_20_FULL.html#one-shot-dao-functions","text":"But what if we just want to run a DAO function and not receive updates? Or what if the function is an insert/update/delete? We want to call these functions and wait for the result . This call needs to be on a non-UI thread. In our examples, we again use Kotlin coroutines. For example, let's call an update function in the DAO: scope . launch { database . dao . update ( person1 ) } Here we kick off a coroutine to perform some work and call the update function. But what thread does this run on? That depends on the scope used to launch the coroutine, and would be a decision for the caller to make. We could do scope . launch ( Dispatchers . IO ) { database . dao . update ( person1 ) } but this has a few problems. First, as mentioned, the caller has to choose the dispatcher. When you leave things to the caller reading the documentation that says \"make sure you run this off the UI thread\", some calls are going to miss it. Second, Room cannot optimize the way that the database is accessed, because it doesn't know we're running the function in a coroutine. So let's tell Room.","title":"One-Shot DAO Functions"},{"location":"week-03/3.1-Room/STEP_25_FULL.html","text":"So far we've only talked about entities by themselves. But we really need relationships to make things work. There are two general approaches to making relationships work Helper class: You define a non-entity class to hold data and explicitly pull columns @Embedded objects can group attributes into objects @Relation objects run secondary queries automatically Multi-map: Specify a Map<Entity, List<OtherEntity>> as the return type on a DAO function We'll look into using some of these in a few examples, which should be enough for the class assignment. For a more detailed discussion see https://developer.android.com/training/data-storage/room/relationships . Fetching Partial Data You can use a helper class to fetch partial data from an Entity. Let's start by only fetching the name and age of Person entities. Recall that our Person looks like @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) If we only want the name and age , we can define a data class with just those properties: data class NameAndAge ( val name : String , val age : Int , ) Note Note that NameAndAge does not have the @Entity annotation! It's just a normal data class! And then in the DAO, you can define @Query ( \"SELECT name, age FROM Person\" ) fun getNamesAndAges (): Flow < List < NameAndAge >> Room will fill the NameAndAge instances, not returning the id or ssn . (This would also work with a \"SELECT * FROM Person\" query, but that would fetch all the data from the database before creating NameAndAge objects with just the name and age ) One-to-One Let's set up support to fetch a BirthCertificate while we're fetching a Person . Suppose we have entities @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class BirthCertificate ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var owningPersonId : String , var fatherName : String , var motherName : String , var birthTime : Long , ) We want to fetch a Person and its associated BirthCertificate at the same time. So we create data class PersonAndBirthCertificate ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // the id attribute of the \"owner\" entityColumn = \"owningPersonId\" , // the foreign key in the related item that holds the // owner id ) val birthCertificate : BirthCertificate ) // (in the DAO) @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleWithBirthCertificates (): Flow < List < PersonAndBirthCertificate >> Our helper class, PersonAndBirthCertificate contains two objects - a Person and a BirthCertificate . Surprise! Let's talk through how they get filled in. We run the getPeopleWithBirthCertificates function in the Dao. The \"SELECT * FROM Person\" query is run, fetching all Person data from the table. Room looks at the return type and creates a PersonAndBirthCertificate instance for each row in the table. Room sees the @Embedded annotation on person and copies the data from all columns matching properties in the Person to a new Person instance. Note that the @Embedded object doesn't have to be the same type as table we're querying. It could be a partial-data class that contains properties that match columns in the table. Note that you can use @ColumnInfo annotations to create custom mappings between column names and properties, but we're not covering that in this class. Room sees a @Relation annotation on the birthCertificates property, and runs another query to fetch the BirthCertificates . The @Relation annotation specifies a parentColumn and entityColumn . parentColumn is the column in the original query that is considered the id of the owner entityColumn is the foreign key inside the related object (the one specified as the type of the annotated property, BirthCertificate in this example) Room's query fetches from the BirthCertificate table grabbing entities that have a owningPersonId that matches the id of each Person Room fills in the BirthCertificate for each PersonWithBirthCertificate You can have multiple @Relation annotations inside the helper class, but note that they each result in running an extra query. You can also nest relations, where related objects can contain their own @Relation annotations to create a larger graph of results. Note Did you notice the @Transaction annotation on the getPeopleWithBirthCertificates function? This ensures that no matter how many queries are run when the function is called, they're all treated atomically. No updates can happen between any of the queries, keeping the returned data consistent. Whenever you use @Relation , make sure any DAO functions that reference the class containing it are marked with @Transaction . @Transaction can also be used when defining non-abstract functions in a DAO. For example, suppose you want to define a transfer function in a banking DAO that removes funds from one account and deposits them in another account. You would need a @Transaction annotation on such a function so the operation is atomic. You'd never want it to be able to only deposit or withdraw. You could write (if the DAO is an abstract class): @Transaction fun transfer ( from : Account , to : Account , amount : Long ) { withdraw ( from , amount ) deposit ( to , amount ) } One-to-Many One-to-Many works almost exactly like One-to-One. The only difference is the declaration of the related property in the helper object. For our Organs example, we could define @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class Organ ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var owningPersonId : String , var type : String , ) for our entities, and data class PersonAndOrgans ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // the id attribute of the \"owner\" entityColumn = \"owningPersonId\" , // the foreign key in the related item that holds the // owner id ) val organs : List < Organ > ) // and in the DAO @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleAndOrgans (): Flow < List < PersonAndOrgans >> The only difference here is that our related property, organs is a List rather than a single-value property. Many-to-Many Things get more complex when we define a many-to-many relationship. Take our example of Person and Address : @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class Address ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var street : String , var city : String , var state : String , var zipCode : String , ) @Entity ( primaryKeys = [ \"personId\" , \"addressId\" ] ) data class PersonAddress ( var personId : String , var addressId : String , ) These three entities give us a many-to-many relationship: A Person can have multiple Address entities (home, work, etc) An Address can host multiple Person entities. All three are entities, and we can use helper objects to fetch a Person or Address and the related other: data class PersonAndAddresses ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // which property represents the id of the person // (the main entity we're fetching) entityColumn = \"id\" , // which property represents the id of the Address (the related entity) associateBy = Junction ( PersonAddress :: class , parentColumn = \"personId\" , // which property **in the association table** represents // the id of the person (the main entity we're fetching) entityColumn = \"addressId\" , // which property **in the association table** represents // the id of the Address (the related entity) ), ) val addresses : List < Address > ) // in the DAO @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleAndAddresses (): Flow < List < PersonAndAddresses >> Similar to before, but we add an associateBy attribute to describe the association table. Room maps the parentColumn of the @Relation to the parentColumn in the Junction , and the entityColumn in the @Relation to the entityColumn in the Junction . This ends up running two queries. First, get all the Person entities. SELECT * FROM Person SELECT Address.id, Address.street, Address.city, Address.state, Address.zip, PersonAddress.movieId FROM PersonAddress INNER JOIN Address ON (PersonAddress.addressId = Address.id) WHERE PersonAddress.personId IN ($personIds)","title":"Room Relations"},{"location":"week-03/3.1-Room/STEP_25_FULL.html#fetching-partial-data","text":"You can use a helper class to fetch partial data from an Entity. Let's start by only fetching the name and age of Person entities. Recall that our Person looks like @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) If we only want the name and age , we can define a data class with just those properties: data class NameAndAge ( val name : String , val age : Int , ) Note Note that NameAndAge does not have the @Entity annotation! It's just a normal data class! And then in the DAO, you can define @Query ( \"SELECT name, age FROM Person\" ) fun getNamesAndAges (): Flow < List < NameAndAge >> Room will fill the NameAndAge instances, not returning the id or ssn . (This would also work with a \"SELECT * FROM Person\" query, but that would fetch all the data from the database before creating NameAndAge objects with just the name and age )","title":"Fetching Partial Data"},{"location":"week-03/3.1-Room/STEP_25_FULL.html#one-to-one","text":"Let's set up support to fetch a BirthCertificate while we're fetching a Person . Suppose we have entities @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class BirthCertificate ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var owningPersonId : String , var fatherName : String , var motherName : String , var birthTime : Long , ) We want to fetch a Person and its associated BirthCertificate at the same time. So we create data class PersonAndBirthCertificate ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // the id attribute of the \"owner\" entityColumn = \"owningPersonId\" , // the foreign key in the related item that holds the // owner id ) val birthCertificate : BirthCertificate ) // (in the DAO) @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleWithBirthCertificates (): Flow < List < PersonAndBirthCertificate >> Our helper class, PersonAndBirthCertificate contains two objects - a Person and a BirthCertificate . Surprise! Let's talk through how they get filled in. We run the getPeopleWithBirthCertificates function in the Dao. The \"SELECT * FROM Person\" query is run, fetching all Person data from the table. Room looks at the return type and creates a PersonAndBirthCertificate instance for each row in the table. Room sees the @Embedded annotation on person and copies the data from all columns matching properties in the Person to a new Person instance. Note that the @Embedded object doesn't have to be the same type as table we're querying. It could be a partial-data class that contains properties that match columns in the table. Note that you can use @ColumnInfo annotations to create custom mappings between column names and properties, but we're not covering that in this class. Room sees a @Relation annotation on the birthCertificates property, and runs another query to fetch the BirthCertificates . The @Relation annotation specifies a parentColumn and entityColumn . parentColumn is the column in the original query that is considered the id of the owner entityColumn is the foreign key inside the related object (the one specified as the type of the annotated property, BirthCertificate in this example) Room's query fetches from the BirthCertificate table grabbing entities that have a owningPersonId that matches the id of each Person Room fills in the BirthCertificate for each PersonWithBirthCertificate You can have multiple @Relation annotations inside the helper class, but note that they each result in running an extra query. You can also nest relations, where related objects can contain their own @Relation annotations to create a larger graph of results. Note Did you notice the @Transaction annotation on the getPeopleWithBirthCertificates function? This ensures that no matter how many queries are run when the function is called, they're all treated atomically. No updates can happen between any of the queries, keeping the returned data consistent. Whenever you use @Relation , make sure any DAO functions that reference the class containing it are marked with @Transaction . @Transaction can also be used when defining non-abstract functions in a DAO. For example, suppose you want to define a transfer function in a banking DAO that removes funds from one account and deposits them in another account. You would need a @Transaction annotation on such a function so the operation is atomic. You'd never want it to be able to only deposit or withdraw. You could write (if the DAO is an abstract class): @Transaction fun transfer ( from : Account , to : Account , amount : Long ) { withdraw ( from , amount ) deposit ( to , amount ) }","title":"One-to-One"},{"location":"week-03/3.1-Room/STEP_25_FULL.html#one-to-many","text":"One-to-Many works almost exactly like One-to-One. The only difference is the declaration of the related property in the helper object. For our Organs example, we could define @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class Organ ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var owningPersonId : String , var type : String , ) for our entities, and data class PersonAndOrgans ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // the id attribute of the \"owner\" entityColumn = \"owningPersonId\" , // the foreign key in the related item that holds the // owner id ) val organs : List < Organ > ) // and in the DAO @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleAndOrgans (): Flow < List < PersonAndOrgans >> The only difference here is that our related property, organs is a List rather than a single-value property.","title":"One-to-Many"},{"location":"week-03/3.1-Room/STEP_25_FULL.html#many-to-many","text":"Things get more complex when we define a many-to-many relationship. Take our example of Person and Address : @Entity data class Person ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var name : String , var age : Int , var ssn : String , ) @Entity data class Address ( @PrimaryKey var id : String = UUID . randomUUID (). toString (), var street : String , var city : String , var state : String , var zipCode : String , ) @Entity ( primaryKeys = [ \"personId\" , \"addressId\" ] ) data class PersonAddress ( var personId : String , var addressId : String , ) These three entities give us a many-to-many relationship: A Person can have multiple Address entities (home, work, etc) An Address can host multiple Person entities. All three are entities, and we can use helper objects to fetch a Person or Address and the related other: data class PersonAndAddresses ( @Embedded val person : Person , @Relation ( parentColumn = \"id\" , // which property represents the id of the person // (the main entity we're fetching) entityColumn = \"id\" , // which property represents the id of the Address (the related entity) associateBy = Junction ( PersonAddress :: class , parentColumn = \"personId\" , // which property **in the association table** represents // the id of the person (the main entity we're fetching) entityColumn = \"addressId\" , // which property **in the association table** represents // the id of the Address (the related entity) ), ) val addresses : List < Address > ) // in the DAO @Transaction @Query ( \"SELECT * FROM Person\" ) fun getPeopleAndAddresses (): Flow < List < PersonAndAddresses >> Similar to before, but we add an associateBy attribute to describe the association table. Room maps the parentColumn of the @Relation to the parentColumn in the Junction , and the entityColumn in the @Relation to the entityColumn in the Junction . This ends up running two queries. First, get all the Person entities. SELECT * FROM Person SELECT Address.id, Address.street, Address.city, Address.state, Address.zip, PersonAddress.movieId FROM PersonAddress INNER JOIN Address ON (PersonAddress.addressId = Address.id) WHERE PersonAddress.personId IN ($personIds)","title":"Many-to-Many"},{"location":"week-03/3.1-Room/STEP_30_FULL.html","text":"Many operations in a multi-threaded application end up blocking the current thread, and it cannot be used for any other work while it's blocked. Think about a sleep function. You've got some background work running, and it wants to pause for a moment (perhaps you're checking if something has changed once a minute). This ties up the thread that's being used to run that operation. Threads are a limited resource. Using them like this severely limits concurrency on your machine. What we'd like to do is allow other operations to be performed while we're waiting. This is where suspending functions come into play. A suspending function is one that can be paused when it's called, with the current state of its caller captured. Coroutines are cooperative . Java threads are pre-emptive . Long ago, multitasking was all about being cooperative. Your program would start running on a CPU, and would keep running until you would yield , telling the CPU it was ok to give another program a turn. Your state was saved, the CPU would run something else, and it would yield to allow you (or something else picked by the scheduler) to run. But all it took was one rogue program to hog the CPU and starve all other programs until it was done. This wouldn't necessarily be done by a malicious programmer; it was easy to accidentally omit the yield, as it depended upon the programmer reading the right chunk of documentation. Pre-emptive multitasking got rid of that worry. When multiple programs wanted to run at the same time, the CPU scheduler would grant each a chunk of time on one of its threads, then switch to another program. It wasn't up to the programmer. Kotlin is most often run on top of the Java Virtual Machine (JVM), which uses a pre-emptive threading model. When we use cooperative coroutines, we get an interesting mix of threading models that works well in our favor. A coroutine cannot starve other processes that want to use a thread, as the pre-emptive nature of the JVM will force switches. But if a blocking operation (like a sleep ) is performed, the CPU will keep switching back to the operation, wasting time that other processes could use. Coroutine work is scheduled in a way that can decide when it really needs to use a thread. Instead of blocking a thread from being used while sleep is called, we use delay , which interacts with the scheduler to request to be continued at a later time. Other coroutines can then use the underlying thread, allowing much better concurrency. Marking a function with the suspend keyword causes the Kotlin compiler to modify that function to pass an additional parameter called a \"continuation\". Whenever a suspend function is called from within it, the continuation remembers our function state so we can restart at that point later. The scheduler can then use the thread that the suspend function was being run on. Later, when our suspend function gets another chance to run, the continuation is used to execute the next chunk (up until another suspend function is called). For more detail on how this works, check out Suspend functions - Kotlin vocabulary . Suspending functions can only be called from another suspend function or within a coroutine, started by launch (no result needed) or async (allows us to wait for a result). Dispatchers manage one or more threads as a group. As we've seen earlier, we use dispatchers to switch the coroutine processing to work on a different thread using the withContext(dispatcher) function, which is itself a suspending function! Google's current advice is that suspending functions should be \"main-thread safe\". If the function is called from the main (UI) thread, it should use withContext to switch to a different dispatcher. For example, if we wanted to define a function to update a person in the database, we could write suspend fun updatePerson ( person : Person ) { withContext ( Dispatchers . IO ) { database . dao . update ( person ) } } This function is main-safe, as it forces a switch to the IO dispatcher. Often you'll see suspend functions written using Kotlin's single-expression-function syntax. ( withContext will return the value that its lambda returns). suspend fun updatePerson ( person : Person ) = withContext ( Dispatchers . IO ) { database . dao . update ( person ) } Because this is a common task to perform, and because Room can perform some extra optimization if it knows it's running in a coroutine, we can add suspend to our DAO function declarations. The Room compiler will create a main-safe suspending function for you: @Dao interface PersonDao { ... @Insert suspend fun insert ( vararg person : Person ) @Update suspend fun update ( vararg person : Person ) @Delete suspend fun delete ( vararg person : Person ) @Query ( \"DELETE FROM Person WHERE id IN (:ids)\" ) suspend fun delete ( ids : List < String > ) } This forces you to launch coroutines to call these functions ( suspend functions can only be called from coroutines or other suspend functions) and switches to a dispatcher that Room defines to optimize the database access.","title":"Suspending Functions"},{"location":"week-03/3.1-Room/STEP_40_FULL.html","text":"A Repository is an optional abstraction at the top of the Data Layer . It's often used to Expose data from multiple data sources Cache data from a remote data source (such as a web service) in a local data source (such as a database or file) Convert data into Data Transfer Objects that expose a more restricted view of the data In this class, we'll be using it to create Data Transfer Objects . If you're interested in other uses of a Repository, search online for terms such as \"Android Repository Cache\". But first, where does the Repository go? It's part of the Data Layer , but by smart use of Modules in your application, you can take advantage of dependencies between modules to prevent other layers from accidentally accessing data directly. flowchart LR subgraph User Interface Layer ui[User Interface Module\\nView Model\\nUser interface] end ui --> repo subgraph Data Layer repo[Repository Module\\nRepository\\nData Transfer Objects] ds[Data Source Module\\nEntities\\nDAO] repo --> ds end The separate Repository Module prevents the User Interface Module from directly accessing anything in the Data Source Module (assuming you set up module dependencies in your build to restrict that). It's a great way to hide details as well as make the data we use in the user interface immutable , which is great for the Jetpack Compose UI that we'll be creating. We'll see how these modules are set up when we're walking through the example code. Repository Code So what does the code in the Repository module look like? First, let's define a Data Transfer Object for our Person: data class PersonDto ( val id : String , val name : String , val age : Int , val ssn : String , ) Note that all of the properties here are val properties; we can only read them; we cannot change them. We can also define a couple of helper extension functions internal fun Person . toDto () = PersonDto ( id = id , name = name , age = age , ssn = ssn ) internal fun PersonDto . toEntity () = Person ( id = id , name = name , age = age , ssn = ssn ) Kotlin extension functions make it look like we're defining new functions on existing types. Here we add a toDto function to our Person entity, and a toEntity function to our PersonDto . Note that both functions are marked internal . This restricts their use to inside of the module defining them. We're only doing the transformation inside the Repository module. Marking them internal allows us to use them anywhere within the module, no matter which package. Next, we define an interface for the Repository: interface PersonRepository { val peopleFlow : Flow < List < PersonDto >> suspend fun insert ( vararg people : PersonDto ) suspend fun update ( vararg people : PersonDto ) suspend fun delete ( vararg people : PersonDto ) } Note that this interface only uses the PersonDto , not the Person entity. We're only exposing the DTO. We can (and will) have multiple implementations of this interface. We'll start with one that talks to a Room database, and later in the course we'll implement it by talking to a web service. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = Room . databaseBuilder ( context , PersonDatabase :: class . java , \"PEOPLE\" ) . build () . dao ... } To create a Room database instance, we need an Android Context . The Context (typically an Application or Activity instance) gives us access to details about the application, such as where our database files are stored. We pass that to the PersonDatabaseRepository , create a database instance and grab the DAO from it. Next, we expose a Flow<List<PersonDto>> . To do this, we'll take advantage of the map operator on Flow . map creates a new Flow by collecting objects from a Flow and transforming each item into something else. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = ... override val peopleFlow = dao . getPeople () . map { people -> // AAA people . map { it . toDto () } // BBB } ... } The first map call creates that new Flow . Whenever we get a new value, the List<Person> , we pass it to the lambda starting on line AAA . That list is represented by lambda parameter people . Using a map operator against that list (line BBB ), we create a new list by converting each Person into a PersonDto . Anyone collecting peopleFlow will get a List<PersonDto> that contains a read-only copy of the Person entity data. The one-shot functions are all implemented similarly, so we'll just talk through the insert function. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = ... ... override suspend fun insert ( vararg people : PersonDto ) = dao . insert ( * people // AAA . map { it . toEntity () } // BBB . toTypedArray () // CCC ) override suspend fun update ( vararg people : PersonDto ) = ... // similar to insert override suspend fun delete ( vararg people : PersonDto ) = ... // similar to insert } The caller will pass in a varying-length argument list of PersonDto instances. This means they can pass any number of PersonDtos into insert , separarted by commas. For example repository . insert ( person1 ) repository . insert ( person1 , person2 , person3 ) are valid calls to insert . Inside insert , the people parameter is an Array<PersonDto> . We need to convert each PersonDto to a Person entity. Line BBB converts people into a List<Person> . But now we need to pass those Person instances into a varying-length, comma-separated argument list. Java would allow you to just pass an array, but that caused some ambiguity problems. Kotlin removed the ambiguity, but it had to make things a little more complex in the process. We need to \"spread\" the values out as a comma-separated list. That's what the * does on line AAA . * is called the \"spread operator\" in this context. But it only works against an Array of values, so we need to call toTypedArray on line CCC to convert our new List<Person> into an Array<Person> . Once spread, we pass the values into the DAO's insert function. Implement the update and delete functions similarly, and we now have a repository that isolates the Room data from the User Interface Layer .","title":"The Repository"},{"location":"week-03/3.1-Room/STEP_40_FULL.html#repository-code","text":"So what does the code in the Repository module look like? First, let's define a Data Transfer Object for our Person: data class PersonDto ( val id : String , val name : String , val age : Int , val ssn : String , ) Note that all of the properties here are val properties; we can only read them; we cannot change them. We can also define a couple of helper extension functions internal fun Person . toDto () = PersonDto ( id = id , name = name , age = age , ssn = ssn ) internal fun PersonDto . toEntity () = Person ( id = id , name = name , age = age , ssn = ssn ) Kotlin extension functions make it look like we're defining new functions on existing types. Here we add a toDto function to our Person entity, and a toEntity function to our PersonDto . Note that both functions are marked internal . This restricts their use to inside of the module defining them. We're only doing the transformation inside the Repository module. Marking them internal allows us to use them anywhere within the module, no matter which package. Next, we define an interface for the Repository: interface PersonRepository { val peopleFlow : Flow < List < PersonDto >> suspend fun insert ( vararg people : PersonDto ) suspend fun update ( vararg people : PersonDto ) suspend fun delete ( vararg people : PersonDto ) } Note that this interface only uses the PersonDto , not the Person entity. We're only exposing the DTO. We can (and will) have multiple implementations of this interface. We'll start with one that talks to a Room database, and later in the course we'll implement it by talking to a web service. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = Room . databaseBuilder ( context , PersonDatabase :: class . java , \"PEOPLE\" ) . build () . dao ... } To create a Room database instance, we need an Android Context . The Context (typically an Application or Activity instance) gives us access to details about the application, such as where our database files are stored. We pass that to the PersonDatabaseRepository , create a database instance and grab the DAO from it. Next, we expose a Flow<List<PersonDto>> . To do this, we'll take advantage of the map operator on Flow . map creates a new Flow by collecting objects from a Flow and transforming each item into something else. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = ... override val peopleFlow = dao . getPeople () . map { people -> // AAA people . map { it . toDto () } // BBB } ... } The first map call creates that new Flow . Whenever we get a new value, the List<Person> , we pass it to the lambda starting on line AAA . That list is represented by lambda parameter people . Using a map operator against that list (line BBB ), we create a new list by converting each Person into a PersonDto . Anyone collecting peopleFlow will get a List<PersonDto> that contains a read-only copy of the Person entity data. The one-shot functions are all implemented similarly, so we'll just talk through the insert function. class PersonDatabaseRepository ( context : Context ): PersonRepository { private val dao = ... ... override suspend fun insert ( vararg people : PersonDto ) = dao . insert ( * people // AAA . map { it . toEntity () } // BBB . toTypedArray () // CCC ) override suspend fun update ( vararg people : PersonDto ) = ... // similar to insert override suspend fun delete ( vararg people : PersonDto ) = ... // similar to insert } The caller will pass in a varying-length argument list of PersonDto instances. This means they can pass any number of PersonDtos into insert , separarted by commas. For example repository . insert ( person1 ) repository . insert ( person1 , person2 , person3 ) are valid calls to insert . Inside insert , the people parameter is an Array<PersonDto> . We need to convert each PersonDto to a Person entity. Line BBB converts people into a List<Person> . But now we need to pass those Person instances into a varying-length, comma-separated argument list. Java would allow you to just pass an array, but that caused some ambiguity problems. Kotlin removed the ambiguity, but it had to make things a little more complex in the process. We need to \"spread\" the values out as a comma-separated list. That's what the * does on line AAA . * is called the \"spread operator\" in this context. But it only works against an Array of values, so we need to call toTypedArray on line CCC to convert our new List<Person> into an Array<Person> . Once spread, we pass the values into the DAO's insert function. Implement the update and delete functions similarly, and we now have a repository that isolates the Room data from the User Interface Layer .","title":"Repository Code"},{"location":"week-03/3.2-Movie-Database/index.html","text":"Example Source: https://gitlab.com/android-development-2022-refresh/movie-database","title":"Movie Database"},{"location":"week-03/3.2-Movie-Database/STEP_010_REPO.html","text":"After creating a new project in Android Studio.","title":"Starter Project"},{"location":"week-03/3.2-Movie-Database/STEP_020_REPO.html","text":"Update the Android, Kotlin and dependency versions to the latest available. After updating the files, you'll need to re-synchronize them with Android Studio. Android Studio reads the build scripts to determine which modules and which dependencies are used so it can provide code-assist and lint checks in the IDE. When you change a build script, Android Studio will normally display a banner at the top of the file indicating that it needs to be re-synchronized, and you can click \"Sync Now\" to do so. Otherwise you can click the elephant icon on the toolbar to perform this synchronization.","title":"Update Versions"},{"location":"week-03/3.2-Movie-Database/STEP_030_REPO.html","text":"We created new data and repository modules. To do this: Right-click the top-level project in the Project view Choose New -> Module Select the Android Library template Enter data as the Application/Library name Update the Package name to lastname . firstname . appname .data Press Finish Press Add to add the newly-created files to git Then do the same for the repository module. Note that settings.gradle has been updated to add the two new modules. This is how gradle (and Android Studio) know that these are modules it needs to build.","title":"Add Data/Repository Modules"},{"location":"week-03/3.2-Movie-Database/STEP_040_REPO.html","text":"First, I did a little cleanup on the new build scripts, updating versions. Now we're adding the Room dependencies and the Kotlin Symbol Processor (KSP). The Kotlin Symbol Processor is a compiler plugin that loads \"symbol processors\". When we specify dependencies { ... ksp \"androidx.room:room-compiler:$room_version\" ... } in our build.gradle build script for the data module, we're loading in the \"Room Compiler\" symbol processor. This runs as part of the overall Kotlin compilation process, and looks for Room annotations like @Entity and @Database . When it sees them, it generates code to perform our database work. We're only using Room in the data module, so we don't need to add these dependencies in the repository module's build.gradle file. Remember after changing any gradle build files to re-synchronize!","title":"Add Room"},{"location":"week-03/3.2-Movie-Database/STEP_050_REPO.html","text":"Now we need to tell the modules how they depend on each other. flowchart LR subgraph User Interface Layer ui[Module: app\\n] end ui --> repo subgraph Data Layer repo[Module: repository] ds[Module: data] repo --> ds end We set up these dependencies by using implementation project(\":xyz\") in our dependencies. Dependencies can be specified as implementation dependencies or api dependencies. Implementation dependencies are only available within the module that declares them. API dependencies become part of the API of the current module and are made available to any module that depends on the current module. Normally, you should choose the implementation dependency type so modules can hide their implementation dependencies. This also improves build speed, as changes to implementation dependencies are not inherited, and won't trigger a rebuild of modules that depend on the current module.","title":"Module Dependencies"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html","text":"Let's define the Entities, DAO and Database using Room. Here's our schema erDiagram RATING ||--o{ MOVIE: movies MOVIE ||--o{ ROLE : cast ROLE }o--|| ACTOR : appearance What does this mean? RATING <-> MOVIE is a one-to-many relationship A RATING can be associated with zero or more MOVIEs A MOVIE has exactly one RATING MOVIE <-> ACTOR is a many-to-many relationship An ACTOR can appear in zero or more MOVIEs A MOVIE can cast zero or more ACTORs To implement this, we introduce an associative entity ROLE with a one-to-many relationship on each side A MOVIE can cast zero or more ROLEs An ACTOR can appear in zero or more ROLEs A ROLE can appear in exactly one MOVIE A ROLE is played by exactly one ACTOR Let's look at the attributes of each entity. All entities are represented as Kotlin data classes. Rating Represents an MPAA rating (G, PG, PG-13, R, NR) Attribute Type Key id String PK name String description String Actor An actor that can appear in movies Attribute Type Key Comment id String PK name String Movie A movie Attribute Type Key id String PK title String description String ratingId String FK Role Association entity that casts actors into movies Attribute Type Key movieId String FK actorId String FK character String orderInCredits int MovieDAO We start with a DAO that has basic CRUD (Create, Read, Update, Delete) operations. Later we're going to add a concrete function, so I chose to make the DAO an abstract class rather than an interface. All one-shot functions are declared as suspend functions so they'll ensure they're not run on the UI thread. The query functions immediately return a Flow that we'll collect inside a coroutine. We'll add a few more functions as the example grows. MovieDatabase A very typical Room database declaration. The database will contain Movie, Actor, Role and Rating entities and expose a MovieDAO. DatabaseBuilder.kt This Kotlin file hosts a single function that we'll use to create an instance of the database. Defining this function here, in the data module, avoids the need to make the repository module depend on Room. Note that if you want to see the SQL queries that are being run, you can uncomment the setQueryCallback call and look at the Logcat view at the bottom of Android Studio.","title":"Entities, DAO and Database"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#rating","text":"Represents an MPAA rating (G, PG, PG-13, R, NR) Attribute Type Key id String PK name String description String","title":"Rating"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#actor","text":"An actor that can appear in movies Attribute Type Key Comment id String PK name String","title":"Actor"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#movie","text":"A movie Attribute Type Key id String PK title String description String ratingId String FK","title":"Movie"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#role","text":"Association entity that casts actors into movies Attribute Type Key movieId String FK actorId String FK character String orderInCredits int","title":"Role"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#moviedao","text":"We start with a DAO that has basic CRUD (Create, Read, Update, Delete) operations. Later we're going to add a concrete function, so I chose to make the DAO an abstract class rather than an interface. All one-shot functions are declared as suspend functions so they'll ensure they're not run on the UI thread. The query functions immediately return a Flow that we'll collect inside a coroutine. We'll add a few more functions as the example grows.","title":"MovieDAO"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#moviedatabase","text":"A very typical Room database declaration. The database will contain Movie, Actor, Role and Rating entities and expose a MovieDAO.","title":"MovieDatabase"},{"location":"week-03/3.2-Movie-Database/STEP_060_REPO.html#databasebuilderkt","text":"This Kotlin file hosts a single function that we'll use to create an instance of the database. Defining this function here, in the data module, avoids the need to make the repository module depend on Room. Note that if you want to see the SQL queries that are being run, you can uncomment the setQueryCallback call and look at the Logcat view at the bottom of Android Studio.","title":"DatabaseBuilder.kt"},{"location":"week-03/3.2-Movie-Database/STEP_070_REPO.html","text":"Now the basics of the repository module. DTOs We create Data Transfer Objects to abstract and restrict how the data is used. These DTOs are immutable, which will help Jetpack Compose optimize UI updates. We also define extension functions to convert between the entities defined in the data module and the DTOs we expose from this repository module. Note that the extension functions are marked internal . This makes them accessible anywhere inside the repository module, but not outside the module. MovieRepository The MovieRepository interface defines how we communicate with a repository. This allows different repository implementations (later we'll add a web-service implementation). Note that I'm not using vararg in the MovieRepository . This is because it simplifies our web services implementation when we do it later. MovieDatabaseRepository This is the concrete implementation of MovieRepository that we use to work with the Room database. Much of it (the one-shot functions) is direct passthrough to the DAO. The query functions that expose a Flow transform the returned entities into DTOs. The map function on Flow creates a new flow that calls the nested map on the list of entities to convert them into DTOs.","title":"Repository Types"},{"location":"week-03/3.2-Movie-Database/STEP_070_REPO.html#dtos","text":"We create Data Transfer Objects to abstract and restrict how the data is used. These DTOs are immutable, which will help Jetpack Compose optimize UI updates. We also define extension functions to convert between the entities defined in the data module and the DTOs we expose from this repository module. Note that the extension functions are marked internal . This makes them accessible anywhere inside the repository module, but not outside the module.","title":"DTOs"},{"location":"week-03/3.2-Movie-Database/STEP_070_REPO.html#movierepository","text":"The MovieRepository interface defines how we communicate with a repository. This allows different repository implementations (later we'll add a web-service implementation). Note that I'm not using vararg in the MovieRepository . This is because it simplifies our web services implementation when we do it later.","title":"MovieRepository"},{"location":"week-03/3.2-Movie-Database/STEP_070_REPO.html#moviedatabaserepository","text":"This is the concrete implementation of MovieRepository that we use to work with the Room database. Much of it (the one-shot functions) is direct passthrough to the DAO. The query functions that expose a Flow transform the returned entities into DTOs. The map function on Flow creates a new flow that calls the nested map on the list of entities to convert them into DTOs.","title":"MovieDatabaseRepository"},{"location":"week-03/3.2-Movie-Database/STEP_080_REPO.html","text":"For our example application, I want to add an easy way to reset the database to contain some initial, sample data. We start at the DAO in the data module, and add one-shot functions to clear the existing tables, and a concrete one-shot resetDatabase function to perform those clears and re-add the sample data. Moving on to the repository module, we expose the resetDatabase function. Finally, we move up to the app module, our user interface, and add a MovieViewModel class to manage data for the user interface. We create an instance of the repository, and expose the Flows to the UI along with the resetDatabase function. Note The resetDatabase function in the repository and data modules is a suspend function, so we need to start a coroutine to call it. When we're responding to user events, like button presses, we generally want to call a function in the view model and have it start its processing using the view model's coroutine scope , which is called viewModelScope . We'll see some other ways to start coroutines for looking up data when we enter a screen later.","title":"Sample Data"},{"location":"week-03/3.2-Movie-Database/STEP_090_REPO.html","text":"Let's see if anything is working by creating a truly hideous (but simple) UI. (When we talk about Jetpack Compose in more detail, we'll create much better UI.) build.gradle First, we'll need to access the view model in the user interface. We update the app module's build.gradle to include the lifecycle-viewmodel-compose dependency. This gives us a viewModel() function that we can use as a default parameter value when we're defining our UI functions. Info Super quick intro to Jetpack Compose: You write functions to declare what the UI should look like. When the values of the parameters change, the UI is refreshed. (That's a huge oversimplification, but should be enough to work with for now.) Notice the word \"declare\"? These functions describe the user interface rather than creating it directly. Behind the scenes, that description is updated as these functions run, and the Compose runtime determines what has changed for each update so it can refresh the UI. Follow this example when writing your assignment and you'll survive just fine. Later we'll detail how things work. Unfortunately, if we spent the time to learn Compose and Room before starting the first assignment, we'd have several weeks of no assignments... MovieViewModel For our simple UI, we need some way to track which \"screen\" the user is viewing. We do that be defining a sealed interface named Screen . This is a special type of interface that requires all implementations be defined in the same module . This is awesome, because the compiler can know all possible values , and we can write exhaustive when expressions! At this stage we use objects to represent each screen the user might visit. Kotlin's object keyword defines a singleton instance that implements the interface. Right now there's no data needed inside the screen state, so objects work perfectly. We'll add a screen that views a specific movie shortly, and this will require a class that we can instantiate. We expose the current screen using Jetpack Compose state. (I'm waiving my hands furiously right now) Just think of it as a box that can store data, and Compose will know when that data changes so it can refresh the UI. MainActivity Finally! The user interface! We define functions annotated with @Composable (known as \"Composable Functions\") to declare parts of our user interface. Note The names of these @Composable functions will probably look odd. Jetpack Compose uses an UpperCamelCase naming convention for @Composable functions that declare parts of the UI. We're defining a (did I mention hideous?) UI that has buttons at the top of the screen to switch between screens and reset the database. You'll need to reset the database to see any data. Warning When choosing types via content selection, be careful which package you select. Modifier is particularly painful, as the content assist often sorts java.lang.reflect.Modifier above androidx.compose.ui.Modifier (which is the one we want when using Compose). I can't count the number of times I've accidentally selected java.lang.reflect.Modifier ... This mistake will usually become obvious when you try to use other functions (and they're not found). For example, when writing these samples I made the java.lang.reflect.Modifier mistake, and then padding and clickable couldn't be found.","title":"Hideous UI"},{"location":"week-03/3.2-Movie-Database/STEP_090_REPO.html#buildgradle","text":"First, we'll need to access the view model in the user interface. We update the app module's build.gradle to include the lifecycle-viewmodel-compose dependency. This gives us a viewModel() function that we can use as a default parameter value when we're defining our UI functions. Info Super quick intro to Jetpack Compose: You write functions to declare what the UI should look like. When the values of the parameters change, the UI is refreshed. (That's a huge oversimplification, but should be enough to work with for now.) Notice the word \"declare\"? These functions describe the user interface rather than creating it directly. Behind the scenes, that description is updated as these functions run, and the Compose runtime determines what has changed for each update so it can refresh the UI. Follow this example when writing your assignment and you'll survive just fine. Later we'll detail how things work. Unfortunately, if we spent the time to learn Compose and Room before starting the first assignment, we'd have several weeks of no assignments...","title":"build.gradle"},{"location":"week-03/3.2-Movie-Database/STEP_090_REPO.html#movieviewmodel","text":"For our simple UI, we need some way to track which \"screen\" the user is viewing. We do that be defining a sealed interface named Screen . This is a special type of interface that requires all implementations be defined in the same module . This is awesome, because the compiler can know all possible values , and we can write exhaustive when expressions! At this stage we use objects to represent each screen the user might visit. Kotlin's object keyword defines a singleton instance that implements the interface. Right now there's no data needed inside the screen state, so objects work perfectly. We'll add a screen that views a specific movie shortly, and this will require a class that we can instantiate. We expose the current screen using Jetpack Compose state. (I'm waiving my hands furiously right now) Just think of it as a box that can store data, and Compose will know when that data changes so it can refresh the UI.","title":"MovieViewModel"},{"location":"week-03/3.2-Movie-Database/STEP_090_REPO.html#mainactivity","text":"Finally! The user interface! We define functions annotated with @Composable (known as \"Composable Functions\") to declare parts of our user interface. Note The names of these @Composable functions will probably look odd. Jetpack Compose uses an UpperCamelCase naming convention for @Composable functions that declare parts of the UI. We're defining a (did I mention hideous?) UI that has buttons at the top of the screen to switch between screens and reset the database. You'll need to reset the database to see any data. Warning When choosing types via content selection, be careful which package you select. Modifier is particularly painful, as the content assist often sorts java.lang.reflect.Modifier above androidx.compose.ui.Modifier (which is the one we want when using Compose). I can't count the number of times I've accidentally selected java.lang.reflect.Modifier ... This mistake will usually become obvious when you try to use other functions (and they're not found). For example, when writing these samples I made the java.lang.reflect.Modifier mistake, and then padding and clickable couldn't be found.","title":"MainActivity"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html","text":"Let's create a screen to display a Rating and a list of its Movies. This screen will be displayed when a Rating is clicked in the rating list screen. We'll keep track of the id of the clicked Rating in a new Screen object, passing that id to the new display screen. When we set up the real UI later on, we'll be tracking screens that the user has visited in a stack, so they can go back. This allows the user to explore movie and actor relationships. If the user is watching a \"The Transporter\" movie and views its cast in this application, they might want to see what other movies star \"Jason Statham\". After looking, they may want to go back to see who else is in \"The Transporter\" by pressing the Android \"back\" button. If we keep track of the actual Dtos in that stack, they could become stale. The user could have edited a Movie or Actor , and the old DTO instances would still old the old information. Going back would show the stale data. Instead, we track the ids of the objects we've seen on the stack. But how do we get the data we need to display on the screen? We pass the id and a function that can fetch the actual data. When we enter the screen, it will kick off a coroutine to fetch the data, and update itself when the fetch has completed. There are several files being modified in this step; we'll work our way from the data module up through the app module a piece at a time. data Rating.kt Rating <-> Movie is a one-to-many relationship. We can use a non- @Entity Kotlin data class to tell Room to fetch the Rating and its Movies at the same time. First, we create a helper class, RatingWithMovies to ask Room to fetch the Rating and its Movies . We'll be asking the DAO to fetch a single Rating by its id . We'll hold onto it in the @Embedded rating property. Room sees the @Relation annotation on the movies property and runs a query to fetch all Movies that have a ratingId value that matches the Rating id . data MovieDAO.kt We add a new @Query to the DAO to look up a single Rating by its id . Note the return type! We're not returning an entity here; we're returning the new RatingWithMovies data class. Because it contains a @Relation annotation, Room will need to run an additional query to fetch the Movies . To ensure we're seeing consistent data, we must annotate getRatingWithMovies with @Transaction so no database updates can occur between the Rating query and the query to get its Movies . repository Rating.kt Moving up to the repository module, we create a corresponding Data Transfer Object RatingWithMoviesDto and a toDto function to make the transform easy. repository MovieRepository, MovieDatabaseRepository The screen will be fetching the Rating by its id and using its result. We can't do this on the UI thread or the user interface can become less responsive and appear \"janky\". So the screen will kick off a coroutine to fetch the Rating and its Movies . We expose the fetching functionality through the MovieRepository as a one-shot suspend function (which in turn will be exposed through the MovieViewModel for the UI to call). app MovieViewModel Because we're adding a new Screen , we need to create data to represent it. The \"rating screen\" needs to know which Rating to display, so we cannot use a singleton object ; we'll need separate instances for each time we see a rating screen. We define a Kotlin data class called RatingScreen (implementing Screen ) to track this. To facilitate the Rating lookup, we define a passthrough getRatingWithMovies function, which asks the repository module to fetch the data (which in turn asks the data module to fetch the data.) app MainActivity.kt (This file is getting big and managing too many different things... we'll clean that up in the next step.) Let's look at each of the changed pieces. SimpleText and SimpleButton I'm tweaking these functions to allow text to be clicked (so we can click a Rating and switch to the rating display screen). The .clickable modifier handles this. Unfortunately I had used SimpleText inside of a Button , and this change would override the button-click functionality! So I converted the text display in the button back to Compose's Text . Screen Selection The when expression used to determine what to display on the screen now includes the RatingScreen . We need to check for it using is RatingScreen , which checks to see if the screen is an instance of RatingScreen , rather than comparing it to a singleton object value as we did for the lists. We also add a \"what to do when the name of a Rating is clicked on the RatingList \" lambda to the RatingList function. Rating Display The RatingDisplay function has some interesting features that we'll touch upon here and cover in more detail when we talk about Compose. First, the parameters: We pass in the id of the Rating we want to display. We need to look up the Rating (and its Movies ). To perform the lookup, we pass in a fetchRatingsWithMovies function. fetchRatingWithMovies : suspend ( String ) -> RatingWithMoviesDto This function takes a String (the rating id) as a parameter, and returns a RatingWithMoviesDto . Because it will need to call suspend functions to perform this one-shot fetch, this function must also be a suspend function. You'll get used to function-type syntax like this pretty quickly; you'll see it a lot. Whenever you see -> inside a parameter type, you know a function is being passed in. The parameter list for that function appears in (...) and the return type appears after the -> . If we pass in a function that doesn't return anything, we'll use Unit as the return type. Unit means \"just perform some processing; don't return a value\". Next, you'll see var ratingWithMoviesDto by remember { mutableStateOf < RatingWithMoviesDto?> ( null ) } There's a lot going on there, and we'll cover it in detail later. For right now, think of this as a fancy way to declare a local variable in Compose, conceptually similar to var ratingWithMoviesDto : RatingWithMoviesDto = null This variable is used as the data that the rest of the function displays on the UI. But we need to fetch that data. To do this, we launch a coroutine and set that local variable: LaunchedEffect ( key1 = ratingId ) { // starts a coroutine to fetch the rating ratingWithMoviesDto = fetchRatingWithMovies ( ratingId ) } A coroutine is launched whenever the passed-in ratingId value changes (if the last rating was still being fetched, that coroutine will be canceled). Finally, we create the UI. We use Kotlin's let scoping function to only display the data if a rating has been fetched. By writing ratingWithMoviesDto ?. let { ratingWithMovies -> ... } We check if ratingWithMoviesDto is non-null, and if so, call let passing in that non-null value. Keep in mind that ratingWithMoviesDto is set by a coroutine, and could change at any time; using this let call will capture its value so we have a consistent value to work with in the let body.","title":"Rating with Movies"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#data-ratingkt","text":"Rating <-> Movie is a one-to-many relationship. We can use a non- @Entity Kotlin data class to tell Room to fetch the Rating and its Movies at the same time. First, we create a helper class, RatingWithMovies to ask Room to fetch the Rating and its Movies . We'll be asking the DAO to fetch a single Rating by its id . We'll hold onto it in the @Embedded rating property. Room sees the @Relation annotation on the movies property and runs a query to fetch all Movies that have a ratingId value that matches the Rating id .","title":"data Rating.kt"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#data-moviedaokt","text":"We add a new @Query to the DAO to look up a single Rating by its id . Note the return type! We're not returning an entity here; we're returning the new RatingWithMovies data class. Because it contains a @Relation annotation, Room will need to run an additional query to fetch the Movies . To ensure we're seeing consistent data, we must annotate getRatingWithMovies with @Transaction so no database updates can occur between the Rating query and the query to get its Movies .","title":"data MovieDAO.kt"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#repository-ratingkt","text":"Moving up to the repository module, we create a corresponding Data Transfer Object RatingWithMoviesDto and a toDto function to make the transform easy.","title":"repository Rating.kt"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#repository-movierepository-moviedatabaserepository","text":"The screen will be fetching the Rating by its id and using its result. We can't do this on the UI thread or the user interface can become less responsive and appear \"janky\". So the screen will kick off a coroutine to fetch the Rating and its Movies . We expose the fetching functionality through the MovieRepository as a one-shot suspend function (which in turn will be exposed through the MovieViewModel for the UI to call).","title":"repository MovieRepository, MovieDatabaseRepository"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#app-movieviewmodel","text":"Because we're adding a new Screen , we need to create data to represent it. The \"rating screen\" needs to know which Rating to display, so we cannot use a singleton object ; we'll need separate instances for each time we see a rating screen. We define a Kotlin data class called RatingScreen (implementing Screen ) to track this. To facilitate the Rating lookup, we define a passthrough getRatingWithMovies function, which asks the repository module to fetch the data (which in turn asks the data module to fetch the data.)","title":"app MovieViewModel"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#app-mainactivitykt","text":"(This file is getting big and managing too many different things... we'll clean that up in the next step.) Let's look at each of the changed pieces.","title":"app MainActivity.kt"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#simpletext-and-simplebutton","text":"I'm tweaking these functions to allow text to be clicked (so we can click a Rating and switch to the rating display screen). The .clickable modifier handles this. Unfortunately I had used SimpleText inside of a Button , and this change would override the button-click functionality! So I converted the text display in the button back to Compose's Text .","title":"SimpleText and SimpleButton"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#screen-selection","text":"The when expression used to determine what to display on the screen now includes the RatingScreen . We need to check for it using is RatingScreen , which checks to see if the screen is an instance of RatingScreen , rather than comparing it to a singleton object value as we did for the lists. We also add a \"what to do when the name of a Rating is clicked on the RatingList \" lambda to the RatingList function.","title":"Screen Selection"},{"location":"week-03/3.2-Movie-Database/STEP_100_REPO.html#rating-display","text":"The RatingDisplay function has some interesting features that we'll touch upon here and cover in more detail when we talk about Compose. First, the parameters: We pass in the id of the Rating we want to display. We need to look up the Rating (and its Movies ). To perform the lookup, we pass in a fetchRatingsWithMovies function. fetchRatingWithMovies : suspend ( String ) -> RatingWithMoviesDto This function takes a String (the rating id) as a parameter, and returns a RatingWithMoviesDto . Because it will need to call suspend functions to perform this one-shot fetch, this function must also be a suspend function. You'll get used to function-type syntax like this pretty quickly; you'll see it a lot. Whenever you see -> inside a parameter type, you know a function is being passed in. The parameter list for that function appears in (...) and the return type appears after the -> . If we pass in a function that doesn't return anything, we'll use Unit as the return type. Unit means \"just perform some processing; don't return a value\". Next, you'll see var ratingWithMoviesDto by remember { mutableStateOf < RatingWithMoviesDto?> ( null ) } There's a lot going on there, and we'll cover it in detail later. For right now, think of this as a fancy way to declare a local variable in Compose, conceptually similar to var ratingWithMoviesDto : RatingWithMoviesDto = null This variable is used as the data that the rest of the function displays on the UI. But we need to fetch that data. To do this, we launch a coroutine and set that local variable: LaunchedEffect ( key1 = ratingId ) { // starts a coroutine to fetch the rating ratingWithMoviesDto = fetchRatingWithMovies ( ratingId ) } A coroutine is launched whenever the passed-in ratingId value changes (if the last rating was still being fetched, that coroutine will be canceled). Finally, we create the UI. We use Kotlin's let scoping function to only display the data if a rating has been fetched. By writing ratingWithMoviesDto ?. let { ratingWithMovies -> ... } We check if ratingWithMoviesDto is non-null, and if so, call let passing in that non-null value. Keep in mind that ratingWithMoviesDto is set by a coroutine, and could change at any time; using this let call will capture its value so we have a consistent value to work with in the let body.","title":"Rating Display"},{"location":"week-03/3.2-Movie-Database/STEP_110_REPO.html","text":"That MainActivity has become quite the mess. While it can be tempting to start off throwing all of your @Composable functions into the same file, try to avoid that temptation, as you'll quickly end up with our current mess. In this step, I've moved the functions out into their own files. SimpleButton and SimpleText have been moved to a components package, and the other @Composable functions moved into a screens package. Much better now!","title":"Refactoring"},{"location":"week-03/3.2-Movie-Database/STEP_120_FULL.html","text":"We'll stop here for now and flesh this example out more over time. We'll need to fill in all of the details for displaying Movies and Actors and create a nice user interface. For now, we have enough of an example to create your first real assignment!","title":"Wrap-Up"},{"location":"week-04/4.1-Compose-basics/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-basics","title":"Compose Basics"},{"location":"week-04/4.2-Compose-state/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-state","title":"Compose State"},{"location":"week-05/5.1-Compose-lists/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-lists","title":"Compose Lists"},{"location":"week-05/5.2-Compose-layouts/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-layouts","title":"Compose Layouts"},{"location":"week-05/5.3-Compose-toast-snackbar-dialog/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-toast-snackbar-dialog","title":"Compose Toast Snackbar Dialog"},{"location":"week-05/5.4-Navigation/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/navigation","title":"Navigation"},{"location":"week-06/6.1-Compose-graphics-1/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-graphics-1","title":"Compose Graphics 1"},{"location":"week-07/7.1-Compose-graphics-2/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/compose-graphics-2","title":"Compose Graphics 2"},{"location":"week-08/8.1-Rest/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/rest","title":"Rest"},{"location":"week-09/9.1-Google-map/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/google-map","title":"Google Map"},{"location":"week-09/9.2-Speech/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/speech","title":"Speech"},{"location":"week-10/10.1-Reading-writing-files/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/reading-writing-files","title":"Reading Writing Files"},{"location":"week-10/10.2-Dependency-injection/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/dependency-injection","title":"Dependency Injection"},{"location":"week-10/10.3-Clean-architecture/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/clean-architecture","title":"Clean Architecture"},{"location":"week-11/11.1-Services/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/services","title":"Services"},{"location":"week-11/11.2-Widgets/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/widgets","title":"Widgets"},{"location":"week-12/12.1-Legacy-views/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/legacy-views","title":"Legacy Views"},{"location":"week-12/12.2-Legacy-fragments/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/legacy-fragments","title":"Legacy Fragments"},{"location":"week-13/13.1-Testing/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/testing","title":"Testing"},{"location":"week-13/13.2-Nfc/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/nfc","title":"Nfc"},{"location":"week-14/14.1-Sensors/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/sensors","title":"Sensors"},{"location":"week-14/14.2-Version-catalogs/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/version-catalogs","title":"Version Catalogs"},{"location":"week-14/14.3-Publishing/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/publishing","title":"Publishing"},{"location":"week-14/14.4-Resources/index.html","text":"(Under Development) Example Source: https://gitlab.com/android-development-2022-refresh/resources","title":"Resources"}]}