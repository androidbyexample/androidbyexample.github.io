Fail-fast functions

OO Programming
    tenets
        encapsulation
        inheritence
        polymorphism

classes as blueprints

everything is public/final by default

class Mammal
class Dog: Mammal()
class Cat: Mammal()
need to make Mammal "open"

var d = Dog()
var c = Cat()
var m = Mammal() // doesn't make sense

make Mammal abstract

var m = Cat() // can't assign to Dog
var m: Mammal = Cat() // can assign to Dog

sealed classes

properties in classes

follow article

class Person

class Person {
    name/age
}

constructors
class Person(name, age) {
    name/age
    init {

    }
}

secondary constructors
class Person(name, age) {
    constructor(): this("None", "None")
    name/age
    init {

    }
}

data class
follow rest of article

derived properties

interfaces
default functions
sealed interfaces


polymorphism

interface Tool
class ScrewDriver: Tool
class Saw: Tool
class Toolbox {
    var tools = emptyList<Tool>() // NOTE - List without modifier functions
        private set

    fun add(tool: Tool) {
        println("    Toolbox.add(Tool)")
        tools = tools + tool // NOTE - CREATES NEW LIST!
    }
}

fun main() {
    val toolbox: Toolbox = Toolbox()
    // what is difference in behavior for saw/screwDriver
//    val saw: Tool = Saw()
//    val screwDriver: Tool = ScrewDriver()
    val saw = Saw()
    val screwDriver = ScrewDriver()

    println("adding saw to toolbox")
    toolbox.add(saw)
        // compile time - resolves to add(Tool)
        // runtime - which actual type is toolbox - look for add(Tool)
    println("adding screwdriver to toolbox")
    toolbox.add(screwDriver)
}


== 2 ==
add to toolbox
    fun add(tool: ScrewDriver) { // B
        println("    Toolbox.add(ScrewDriver)")
        tools = tools + tool
    }

how does this change which is called in main?

== 3 ==
change to list of tools in main
    val toolsToAdd = listOf(Saw(), ScrewDriver())

    for(tool in toolsToAdd) {
        println("adding ${tool::class.simpleName} to toolbox")
        toolbox.add(tool)
            // compile time - resolves to add(Tool)
            // runtime - which actual type is toolbox - look for add(Tool)
    }

== 4 ==
using when to force proper calls
    for(tool in toolsToAdd) {
        println("adding ${tool::class.simpleName} to toolbox")
        when(tool) {
            is Saw -> toolbox.add(tool) // resolves to add(Tool)
            is ScrewDriver -> toolbox.add(tool) // resolves to add(ScrewDriver)
            else -> throw IllegalArgumentException("No idea what ${tool::class.simpleName} is")
        }
    }

== 5 ==
if we just want to ignore, remove else

== 6 ==
polymorphism fun
add
class SafeToolbox: Toolbox() {
    fun add(saw: Saw) {
        println("    SafeToolbox.add(Saw)")
        super.add(saw) // calls A
    }
}

    val safeToolbox: Toolbox = SafeToolbox()

which are called?

== 7 == 
change to
val safeToolbox: SafeToolbox = SafeToolbox()
(then infer) val safeToolbox = SafeToolbox()

== 8 ==
add to Toolbox
    open fun add(tool: Saw) { // C
        println("    Toolbox.add(Saw)")
        tools = tools + tool
    }

which is called?

== 9 ==
change to 
    val safeToolbox: Toolbox = SafeToolbox()


Property Delegates